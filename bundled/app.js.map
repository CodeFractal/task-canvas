{
  "version": 3,
  "sources": ["../../src/Abstract/Collections.ts", "../../src/Abstract/Math.ts", "../../src/Presenter/CustomPanZoom.ts", "../../src/Presenter/CoordinateSystem.ts", "../../src/Application/Task.ts", "../../src/Application/Dependency.ts", "../../src/Application/App.ts", "../../src/Controller/MouseAndKeyboard/MouseInputInterpreter.ts", "../../src/Controller/MouseAndKeyboard/ControlStateManager.ts", "../../src/Controller/MouseAndKeyboard/AppController.ts", "../../src/Presenter/DependencyArrow.ts", "../../src/Presenter/ModalDialog.ts", "../../src/Presenter/AppPresenter.ts", "../../src/Storage/GoogleDrive/GoogleDriveService.ts", "../../src/Storage/GoogleDrive/GoogleDriveStorageProvider.ts", "../../src/Storage/GoogleDrive/GoogleDriveStorageConnectionProvider.ts", "../../src/Startup.ts"],
  "sourcesContent": ["export class TwoKeyMap<TKey1, TKey2, TValue> {\n    private readonly map = new Map<TKey1, Map<TKey2, TValue>>();\n    constructor(\n        entries?: Iterable<readonly [TKey1, TKey2, TValue]>\n    ) {\n        if (entries) {\n            for (const [key1, key2, value] of entries) {\n                this.set(key1, key2, value);\n            }\n        }\n    }\n\n    public set(key1: TKey1, key2: TKey2, value: TValue): void {\n        let innerMap = this.map.get(key1);\n        if (!innerMap) {\n            innerMap = new Map<TKey2, TValue>();\n            this.map.set(key1, innerMap);\n        }\n        innerMap.set(key2, value);\n    }\n    public get(key1: TKey1, key2: TKey2): TValue | undefined {\n        const innerMap = this.map.get(key1);\n        return innerMap ? innerMap.get(key2) : undefined;\n    }\n    public delete(key1: TKey1, key2: TKey2): boolean {\n        const innerMap = this.map.get(key1);\n        let result = false;\n        if (innerMap) {\n            result = innerMap.delete(key2);\n            if (innerMap.size === 0) {\n                this.map.delete(key1);\n            }\n        }\n        return result;\n    }\n    public has(key1: TKey1, key2: TKey2): boolean {\n        const innerMap = this.map.get(key1);\n        return innerMap ? innerMap.has(key2) : false;\n    }\n    public clear(): void {\n        this.map.clear();\n    }\n    public getKeys1(): IterableIterator<TKey1> {\n        return this.map.keys();\n    }\n    public getKeys2(key1: TKey1): IterableIterator<TKey2> {\n        const innerMap = this.map.get(key1);\n        return innerMap ? innerMap.keys() : [].values();\n    }\n    public getValues(): IterableIterator<TValue> {\n        const values: TValue[] = [];\n        for (const innerMap of this.map.values()) {\n            for (const value of innerMap.values()) {\n                values.push(value);\n            }\n        }\n        return values.values();\n    }\n    public getEntries(): IterableIterator<[TKey1, TKey2, TValue]> {\n        const entries: [TKey1, TKey2, TValue][] = [];\n        for (const [key1, innerMap] of this.map) {\n            for (const [key2, value] of innerMap) {\n                entries.push([key1, key2, value]);\n            }\n        }\n        return entries.values();\n    }\n}", "export class Vector2D {\n    constructor(\n        public readonly x: number,\n        public readonly y: number) {\n    }\n\n    public static readonly zero = new Vector2D(0, 0);\n    public static readonly identity = new Vector2D(1, 1);\n    public static readonly up = new Vector2D(0, -1);\n    public static readonly down = new Vector2D(0, 1);\n    public static readonly left = new Vector2D(-1, 0);\n    public static readonly right = new Vector2D(1, 0);\n\n    public lenSqr(): number {\n        return this.x * this.x + this.y * this.y;\n    }\n\n    public add(other: Vector2D): Vector2D {\n        return new Vector2D(this.x + other.x, this.y + other.y);\n    }\n\n    public sub(other: Vector2D): Vector2D {\n        return new Vector2D(this.x - other.x, this.y - other.y);\n    }\n\n    public mul(scalar: number): Vector2D {\n        return new Vector2D(this.x * scalar, this.y * scalar);\n    }\n\n    public div(scalar: number): Vector2D {\n        return new Vector2D(this.x / scalar, this.y / scalar);\n    }\n\n    public translate(x: number, y: number): Vector2D {\n        return new Vector2D(this.x + x, this.y + y);\n    }\n\n    public negate(): Vector2D {\n        return new Vector2D(-this.x, -this.y);\n    }\n\n    public normalize(): Vector2D {\n        const lenSqr = this.lenSqr();\n        if (lenSqr === 0) return Vector2D.zero;\n        \n        const invLen = 1 / Math.sqrt(lenSqr);\n        return new Vector2D(this.x * invLen, this.y * invLen);\n    }\n\n    public dot(other: Vector2D): number {\n        return this.x * other.x + this.y * other.y;\n    }\n}\n\nexport class Rectangle {\n    constructor(\n        public readonly position: Vector2D,\n        public readonly size: Vector2D) {\n    }\n    public static fromBounds(bounds: {top: number, right: number, bottom: number, left: number}): Rectangle {\n        return new Rectangle(new Vector2D(bounds.left, bounds.top), new Vector2D(bounds.right - bounds.left, bounds.bottom - bounds.top));\n    }\n    public static fromPoints(p1: Vector2D, p2: Vector2D): Rectangle {\n        return new Rectangle(new Vector2D(Math.min(p1.x, p2.x), Math.min(p1.y, p2.y)), new Vector2D(Math.abs(p1.x - p2.x), Math.abs(p1.y - p2.y)));\n    }\n\n    public get left(): number {\n        return this.position.x;\n    }\n\n    public get right(): number {\n        return this.position.x + this.size.x;\n    }\n\n    public get top(): number {\n        return this.position.y;\n    }\n\n    public get bottom(): number {\n        return this.position.y + this.size.y;\n    }\n\n    public get width(): number {\n        return this.size.x;\n    }\n\n    public get height(): number {\n        return this.size.y;\n    }\n\n    public scale(scalar: number, eigenpoint: Vector2D): Rectangle {\n        return new Rectangle(this.position.sub(eigenpoint).mul(scalar).add(eigenpoint), this.size.mul(scalar));\n    }\n\n    public contains(point: Vector2D): boolean {\n        return point.x >= this.left && point.x <= this.right && point.y >= this.top && point.y <= this.bottom;\n    }\n\n    public intersects(other: Rectangle): boolean {\n        return this.left < other.right && this.right > other.left && this.top < other.bottom && this.bottom > other.top;\n    }\n}", "import { Rectangle, Vector2D } from \"../Abstract/Math\";\n\nexport class CustomPanZoom {\n    private static readonly minScale = 0.25;\n    private static readonly maxScale = 2;\n\n    private static canvas: HTMLElement | null = null;\n    private static scale = 1;\n    private static translation: Vector2D = Vector2D.zero;\n\n    public static init(el: HTMLElement): void {\n        this.canvas = el;\n        this.canvas.style.transformOrigin = \"0 0\";\n        this.canvas.style.cursor = \"default\";\n        this.updateTransform();\n        (this.canvas.parentElement || this.canvas).addEventListener(\"wheel\", e => this.onWheel(e), { passive: false });\n    }\n\n    private static updateTransform(): void {\n        if (this.canvas) {\n            this.canvas.style.transform = `translate(${this.translation.x}px, ${this.translation.y}px) scale(${this.scale})`;\n        }\n    }\n\n    private static onWheel(e: WheelEvent): void {\n        e.preventDefault();\n\n        // Zoom in/out with ctrl + scrollwheel\n        if (e.ctrlKey) {\n            const delta = e.deltaY < 0 ? 0.1 : -0.1;\n            const mousePos = new Vector2D(e.clientX, e.clientY);\n            this.setScale(this.scale + delta, mousePos);\n        }\n\n        // Pan with scrollwheel\n        else {\n            const delta = new Vector2D(e.deltaX, e.deltaY);\n            this.translation = this.translation.sub(delta);\n            this.updateTransform();\n        }\n    }\n\n    public static setScale(newScale: number, eigenpoint: Vector2D): void {\n        newScale = Math.max(this.minScale, Math.min(this.maxScale, newScale));\n        if (newScale !== this.scale && this.canvas) {\n            const scaleRatio = newScale / this.scale;\n\n            // Compute the new translation so that the eigenpoint remains fixed\n            this.translation = this.translation.mul(scaleRatio).add(eigenpoint.mul(1 - scaleRatio));\n            this.scale = newScale;\n            this.updateTransform();\n        }\n    }\n\n    public static panBy(delta: Vector2D): void {\n        this.translation = this.translation.add(delta);\n        this.updateTransform();\n    }\n\n    public static getScale(): number {\n        return this.scale;\n    }\n\n    public static getTranslation(): Vector2D {\n        return this.translation;\n    }\n\n}\n", "import { Rectangle, Vector2D } from \"../Abstract/Math\";\nimport { CustomPanZoom } from \"./CustomPanZoom\";\n\n/** Represents a point on the screen */\nexport class ScreenCoords {\n    constructor(\n        public readonly vec: Vector2D\n    ) { }\n\n    public static new(x: number, y: number): ScreenCoords {\n        return new ScreenCoords(new Vector2D(x, y));\n    }\n\n    /** Creates a ScreenCoords object from a MouseEvent\n     * @param event The MouseEvent to get the coordinates from\n     * @returns A ScreenCoords object representing the coordinates of the MouseEvent\n    */\n    public static fromEvent(event: MouseEvent): ScreenCoords {\n        return ScreenCoords.new(event.clientX, event.clientY);\n    }\n\n    public static readonly zero = new ScreenCoords(Vector2D.zero);\n\n    public get x(): number { return this.vec.x; }\n    public get y(): number { return this.vec.y; }\n\n    /** Adds a SizeOnScreen object to this ScreenCoords object\n     * @param other The SizeOnScreen object to add\n     * @returns A ScreenCoords object representing the sum of the two objects\n     */\n    public add(other: SizeOnScreen): ScreenCoords {\n        return new ScreenCoords(this.vec.add(other.vec));\n    }\n\n    /** Subtracts a SizeOnScreen object from this ScreenCoords object\n     * @param other The SizeOnScreen object to subtract\n     * @returns A ScreenCoords object representing the difference between the two objects\n     */\n    public sub(other: SizeOnScreen): ScreenCoords {\n        return new ScreenCoords(this.vec.sub(other.vec));\n    }\n\n    /** Subtracts another ScreenCoords object from this one\n     * @param other The other ScreenCoords object to subtract\n     * @returns A SizeOnScreen object representing the difference between the two ScreenCoords objects\n     */\n    public subtractCoords(other: ScreenCoords): SizeOnScreen {\n        return new SizeOnScreen(this.vec.sub(other.vec));\n    }\n\n    /** Converts the screen coordinates to canvas coordinates */\n    public toCanvasCoords(): CanvasCoords {\n        const scale = CustomPanZoom.getScale();\n        const translation = CustomPanZoom.getTranslation();\n        return CanvasCoords.new(\n          (this.x - translation.x) / scale,\n          (this.y - translation.y) / scale,\n        );\n    }\n}\n\n/** Represents a size on the screen */\nexport class SizeOnScreen {\n    constructor(\n        public readonly vec: Vector2D\n    ) { }\n\n    public static new(width: number, height: number): SizeOnScreen {\n        return new SizeOnScreen(new Vector2D(width, height));\n    }\n\n    public get width(): number { return this.vec.x; }\n    public get height(): number { return this.vec.y; }\n\n    /** Adds another SizeOnScreen object to this one\n     * @param other The other SizeOnScreen object to add\n     * @returns A SizeOnScreen object representing the sum of the two objects\n     */\n    public add(other: SizeOnScreen): SizeOnScreen {\n        return new SizeOnScreen(this.vec.add(other.vec));\n    }\n\n    /** Subtracts another SizeOnScreen object from this one\n     * @param other The other SizeOnScreen object to subtract\n     * @returns A SizeOnScreen object representing the difference between the two objects\n     */\n    public sub(other: SizeOnScreen): SizeOnScreen {\n        return new SizeOnScreen(this.vec.sub(other.vec));\n    }\n\n    /** Converts the size on the screen to size on canvas */\n    public toCanvasSize(): SizeOnCanvas {\n        const scale = CustomPanZoom.getScale ? CustomPanZoom.getScale() : 1;\n        return new SizeOnCanvas(this.vec.div(scale));\n    }\n}\n\n/** Represents a rectangle on the screen */\nexport class ScreenRect {\n    public readonly rect: Rectangle;\n\n    public constructor(\n        public readonly position: ScreenCoords,\n        public readonly size: SizeOnScreen,\n        rect?: Rectangle\n    ) {\n        this.rect = rect ?? new Rectangle(position.vec, size.vec);\n    }\n\n    /** Creates a ScreenRect object from the bounds of a provided Element\n     * @param element The element to get the bounds from\n     * @returns A ScreenRect object representing the bounds of the element\n    */\n    public static fromElementBounds(element: Element): ScreenRect {\n        const bounds = element.getBoundingClientRect();\n        return new ScreenRect(ScreenCoords.new(bounds.left, bounds.top), SizeOnScreen.new(bounds.width, bounds.height));\n    }\n\n    /** Creates a ScreenRect object from two ScreenCoords\n     * @param p1 The first ScreenCoords\n     * @param p2 The second ScreenCoords\n     * @returns A ScreenRect object representing the rectangle created by the two points\n     */\n    public static fromPoints(p1: ScreenCoords, p2: ScreenCoords): ScreenRect {\n        return new ScreenRect(ScreenCoords.new(Math.min(p1.x, p2.x), Math.min(p1.y, p2.y)), SizeOnScreen.new(Math.abs(p1.x - p2.x), Math.abs(p1.y - p2.y)));\n    }\n\n    /** Converts the screen rectangle to a canvas rectangle */\n    public toCanvasRect(): CanvasRect {\n        return new CanvasRect(this.position.toCanvasCoords(), this.size.toCanvasSize());\n    }\n\n    /** Checks if the rectangle contains a point\n     * @param point The point to check\n     * @returns Whether the rectangle contains the point\n    */\n    public contains(point: ScreenCoords): boolean {\n        return this.rect.contains(point.vec);\n    }\n\n    /** Checks if the rectangle intersects another rectangle\n     * @param other The other rectangle to check\n     * @returns Whether the rectangles intersect\n    */\n    public intersects(other: ScreenRect): boolean {\n        return this.rect.intersects(other.rect);\n    }\n\n}\n\n/** Represents a point on the canvas */\nexport class CanvasCoords {\n    constructor(\n        public readonly vec: Vector2D\n    ) { }\n\n    public static new(x: number, y: number): CanvasCoords {\n        return new CanvasCoords(new Vector2D(x, y));\n    }\n\n    public static readonly zero = new CanvasCoords(Vector2D.zero);\n\n    public get x(): number { return this.vec.x; }\n    public get y(): number { return this.vec.y; }\n\n    /** Adds a SizeOnCanvas object to this CanvasCoords object\n     * @param other The SizeOnCanvas object to add\n     * @returns A CanvasCoords object representing the sum of the two objects\n     */\n    public add(other: SizeOnCanvas): CanvasCoords {\n        return new CanvasCoords(this.vec.add(other.vec));\n    }\n\n    /** Subtracts a SizeOnCanvas object from this CanvasCoords object\n     * @param other The SizeOnCanvas object to subtract\n     * @returns A CanvasCoords object representing the difference between the two objects\n     */\n    public sub(other: SizeOnCanvas): CanvasCoords {\n        return new CanvasCoords(this.vec.sub(other.vec));\n    }\n\n    /** Subtracts another CanvasCoords object from this one\n     * @param other The other CanvasCoords object to subtract\n     * @returns A SizeOnCanvas object representing the difference between the two CanvasCoords objects\n     */\n    public subtractCoords(other: CanvasCoords): SizeOnCanvas {\n        return new SizeOnCanvas(this.vec.sub(other.vec));\n    }\n\n    /** Converts the canvas coordinates to screen coordinates */\n    public toScreenCoords(): ScreenCoords {\n        const scale = CustomPanZoom.getScale ? CustomPanZoom.getScale() : 1;\n        const translation = CustomPanZoom.getTranslation();\n        return ScreenCoords.new(\n          this.x * scale + translation.x,\n          this.y * scale + translation.y,\n        );\n    }\n}\n\n/** Represents a size on the canvas */\nexport class SizeOnCanvas {\n    constructor(\n        public readonly vec: Vector2D\n    ) { }\n\n    public static new(width: number, height: number): SizeOnCanvas {\n        return new SizeOnCanvas(new Vector2D(width, height));\n    }\n\n    public get width(): number { return this.vec.x; }\n    public get height(): number { return this.vec.y; }\n\n    /** Adds another SizeOnCanvas object to this one\n     * @param other The other SizeOnCanvas object to add\n     * @returns A SizeOnCanvas object representing the sum of the two objects\n     */\n    public add(other: SizeOnCanvas): SizeOnCanvas {\n        return new SizeOnCanvas(this.vec.add(other.vec));\n    }\n\n    /** Subtracts another SizeOnCanvas object from this one\n     * @param other The other SizeOnCanvas object to subtract\n     * @returns A SizeOnCanvas object representing the difference between the two objects\n     */\n    public sub(other: SizeOnCanvas): SizeOnCanvas {\n        return new SizeOnCanvas(this.vec.sub(other.vec));\n    }\n\n    /** Converts the size on the canvas to size on screen */\n    public toScreenSize(): SizeOnScreen {\n        const scale = CustomPanZoom.getScale ? CustomPanZoom.getScale() : 1;\n        return new SizeOnScreen(this.vec.mul(scale));\n    }\n}\n\n/** Represents a rectangle on the canvas */\nexport class CanvasRect {\n    public readonly rect: Rectangle;\n    constructor(\n        public readonly position: CanvasCoords,\n        public readonly size: SizeOnCanvas,\n        rect?: Rectangle\n    ) {\n        this.rect = rect ?? new Rectangle(position.vec, size.vec);\n    }\n\n    /** Creates a CanvasRect object from two CanvasCoords\n     * @param p1 The first CanvasCoords\n     * @param p2 The second CanvasCoords\n     * @returns A CanvasRect object representing the rectangle created by the two points\n     */\n    public static fromPoints(p1: CanvasCoords, p2: CanvasCoords): CanvasRect {\n        return new CanvasRect(CanvasCoords.new(Math.min(p1.x, p2.x), Math.min(p1.y, p2.y)), SizeOnCanvas.new(Math.abs(p1.x - p2.x), Math.abs(p1.y - p2.y)));\n    }\n\n    /** Converts the canvas rectangle to a screen rectangle */\n    public toScreenRect(): ScreenRect {\n        return new ScreenRect(this.position.toScreenCoords(), this.size.toScreenSize());\n    }\n\n    /** Checks if the rectangle contains a point\n     * @param point The point to check\n     * @returns Whether the rectangle contains the point\n    */\n    public contains(point: CanvasCoords): boolean {\n        return this.rect.contains(point.vec);\n    }\n\n    /** Checks if the rectangle intersects another rectangle\n     * @param other The other rectangle to check\n     * @returns Whether the rectangles intersect\n    */\n    public intersects(other: CanvasRect): boolean {\n        return this.rect.intersects(other.rect);\n    }\n}", "import { IDependency } from \"../Interfaces/IDependency\";\nimport { ITask } from \"../Interfaces/ITask\";\nimport { CanvasCoords } from \"../Presenter/CoordinateSystem\";\nimport { ITaskDataModel } from \"../Storage/DataModel\";\n\n/** Represents the data for a task */\nexport class Task implements ITask {\n    private static taskIdCounter: number = 0;\n\n    public readonly id: string;\n    public title: string;\n    public description: string;\n    public position: CanvasCoords | null;\n    public completed: boolean;\n    public collapsed: boolean;\n\n    public requiredDependencies: Map<string, IDependency> = new Map();\n    public requiredByDependencies: Map<string, IDependency> = new Map();\n\n    constructor(\n        options: Partial<Task> = {}\n    ) {\n        this.id = options.id || `task-${Task.taskIdCounter++}`;\n        this.title = options.title || 'New Task';\n        this.description = options.description || '<p>Description</p>';\n        this.position = options.position || null;\n        this.completed = options.completed || false;\n        this.collapsed = options.collapsed || false;\n    }\n\n    getId(): string { return this.id; }\n    getTitle(): string { return this.title; }\n    getDescription(): string { return this.description; }\n    isComplete(): boolean { return this.completed; }\n    getRequired(): ReadonlyMap<string, IDependency> { return this.requiredDependencies; }\n    getRequiredBy(): ReadonlyMap<string, IDependency> { return this.requiredByDependencies; }\n    getPosition(): CanvasCoords | null { return this.position; }\n    isExpanded(): boolean { return !this.collapsed; }\n\n    toStorageModel(): ITaskDataModel {\n        if (!this.position) { throw new Error('Task must have a position to be saved'); }\n        return {\n            id: this.id,\n            title: this.title,\n            description: this.description,\n            completed: this.completed,\n            position: this.position,\n            collapsed: this.collapsed\n        };\n    }\n}\n", "import { IDependency } from \"../Interfaces/IDependency\";\nimport { Arrow } from \"../Interfaces/IPresenter\";\nimport { ITask } from \"../Interfaces/ITask\";\nimport { IDependencyDataModel } from \"../Storage/DataModel\";\n\n/** Represents a dependency between two tasks */\nexport class Dependency implements IDependency {\n    public arrow?: Arrow;\n\n    constructor(\n        public readonly requiredTask: ITask,\n        public readonly requiredByTask: ITask\n    ) { }\n\n    getRequiredTask(): ITask { return this.requiredTask; }\n    getRequiredByTask(): ITask { return this.requiredByTask; }\n\n    toStorageModel(): IDependencyDataModel {\n        return {\n            requiredTaskId: this.requiredTask.getId(),\n            requiredByTaskId: this.requiredByTask.getId()\n        };\n    }\n}\n", "/**\n * Main application file for task management.\n * This file sets up global configurations, maintains application state,\n * and registers event listeners for task and dependency management.\n */\n\nimport { TwoKeyMap } from '../Abstract/Collections';\nimport { IApp } from '../Interfaces/IApp';\nimport { IDependency } from '../Interfaces/IDependency';\nimport { ITask } from '../Interfaces/ITask';\nimport { IPresenter } from '../Interfaces/IPresenter';\nimport { CanvasCoords } from '../Presenter/CoordinateSystem';\nimport { Task } from './Task';\nimport { Dependency } from './Dependency';\nimport { IStorageProvider } from '../Storage/IStorageProvider';\nimport { IStorageConnectionProvider } from '../Storage/IStorageConnectionProvider';\n\n/** Object mapping task IDs to Tasks */\nconst allTasks: Map<string, Task> = new Map();\n\n/** All dependencies keyed by requiredTaskId, requiredByTaskId */\nconst allDependencies: TwoKeyMap<string, string, Dependency> = new TwoKeyMap();\n\n/** Stack for undo actions */\nconst undoStack: any[] = [];\n\n/** Stack for redo actions */\nconst redoStack: any[] = [];\n\n// --------------------------------------------------\n// Core Task & Dependency Functions (Business Logic)\n// --------------------------------------------------\n\nexport class App implements IApp {\n    private storageProvider: IStorageProvider | null = null;\n    private canvasIsPaused: boolean = false;\n\n    constructor(\n        private readonly presenter: IPresenter,\n        private readonly storageConnectionProviders: IStorageConnectionProvider[]\n    ) { }\n\n    isCanvasPaused(): boolean {\n        return this.canvasIsPaused;\n    }\n    createTask(position: CanvasCoords): ITask {\n        const task = new Task({ position });\n        allTasks.set(task.id, task);\n        this.presenter.addTaskToCanvas(task);\n\n        this.pushUndo({ type: 'addTask', task: task });\n        this.saveToStorage(task);\n        return task;\n    }\n    toggleTaskCompletion(itask: ITask, complete: boolean | null): void {\n        const task = itask instanceof Task ? itask : allTasks.get(itask.getId());\n        if (!task) throw new Error('Task does not exist');\n\n        task.completed = complete === null ? !task.completed : complete;\n        this.presenter.toggleTaskCompletion(task, task.completed);\n\n        this.pushUndo({ type: 'toggleComplete', taskId: task.id, newValue: task.completed, oldValue: !task.completed });\n        this.saveToStorage(task);\n    }\n    toggleTaskExpansion(itask: ITask, expand: boolean | null): void {\n        const task = itask instanceof Task ? itask : allTasks.get(itask.getId());\n        if (!task) throw new Error('Task does not exist');\n\n        task.collapsed = expand === null ? !task.collapsed : !expand;\n        this.presenter.toggleTaskExpansion(task, task.collapsed);\n\n        this.pushUndo({ type: 'toggleCollapse', taskId: task.id, newValue: task.collapsed, oldValue: !task.collapsed });\n        this.saveToStorage(task);\n    }\n    changeTaskTitle(itask: ITask, title: string): void {\n        const task = itask instanceof Task ? itask : allTasks.get(itask.getId());\n        if (!task) throw new Error('Task does not exist');\n\n        const oldTitle = task.title;\n        task.title = title;\n        this.presenter.setTaskTitle(task, title);\n\n        this.pushUndo({ type: 'editTask', taskId: task.id, field: 'title', newTitle: title, oldTitle: oldTitle });\n        this.saveToStorage(task);\n    }\n    changeTaskDescription(itask: ITask, description: string): void {\n        const task = itask instanceof Task ? itask : allTasks.get(itask.getId());\n        if (!task) throw new Error('Task does not exist');\n\n        const oldDescription = task.description;\n        task.description = description;\n        this.presenter.setTaskDescription(task, description);\n\n        this.pushUndo({ type: 'editTask', taskId: task.id, field: 'description', newDescription: description, oldDescription: oldDescription });\n        this.saveToStorage(task);\n    }\n    moveTasks(taskMovements: { task: ITask; position: CanvasCoords; }[]): void {\n        const moveLogs: { taskId: string, oldPosition: CanvasCoords, newPosition: CanvasCoords }[] = [];\n        const movedTasks: Task[] = [];\n        taskMovements.forEach((taskMovement): void => {\n            const { task: itask, position } = taskMovement;\n\n            const task = itask instanceof Task ? itask : allTasks.get(itask.getId());\n            if (!task) throw new Error('Task does not exist');\n    \n            const oldPosition = task.getPosition() || CanvasCoords.zero;\n\n            task.position = position;\n\n            this.presenter.moveTask(task, position);\n\n            // Update dependencies\n            task.requiredByDependencies.forEach((idep: IDependency): void => {\n                const dep = idep instanceof Dependency ? idep : allDependencies.get(idep.getRequiredTask().getId(), idep.getRequiredByTask().getId());\n                if (!dep?.arrow) return;\n\n                this.presenter.updateArrow(dep.arrow);\n            });\n            task.requiredDependencies.forEach((idep: IDependency): void => {\n                const dep = idep instanceof Dependency ? idep : allDependencies.get(idep.getRequiredTask().getId(), idep.getRequiredByTask().getId());\n                if (!dep?.arrow) return;\n\n                this.presenter.updateArrow(dep.arrow);\n            });\n\n            moveLogs.push({ taskId: task.getId(), oldPosition: oldPosition, newPosition: position });\n            movedTasks.push(task);\n        });\n\n        this.pushUndo({ type: 'moveTasks', taskMovements: moveLogs });\n        this.saveToStorage(movedTasks);\n    }\n    deleteTasks(itasks: ITask[]): void {\n        const tasks: Task[] = itasks.map((itask): Task => {\n            const task = itask instanceof Task ? itask : allTasks.get(itask.getId());\n            if (!task) throw new Error('Task does not exist');            \n            return task;\n        });\n        const deletedTasks: Set<Task> = new Set();\n        const deletedDependencies: Set<Dependency> = new Set();\n\n        for (const task of tasks) {\n            this.presenter.removeTask(task);\n            allTasks.delete(task.getId());\n            deletedTasks.add(task);\n    \n            // Remove dependencies from both sides, but leave them on the task for undo\n            task.requiredByDependencies.forEach((idep: IDependency): void => {\n                const dep = idep instanceof Dependency ? idep : allDependencies.get(idep.getRequiredTask().getId(), idep.getRequiredByTask().getId());\n                if (!dep || deletedDependencies.has(dep)) return;\n\n                this.deleteDependency(dep, false, true);\n                deletedDependencies.add(dep);\n            });\n            task.requiredDependencies.forEach((idep: IDependency): void => {\n                const dep = idep instanceof Dependency ? idep : allDependencies.get(idep.getRequiredTask().getId(), idep.getRequiredByTask().getId());\n                if (!dep || deletedDependencies.has(dep)) return;\n\n                this.deleteDependency(dep, false, true);\n                deletedDependencies.add(dep);\n            });\n        }\n\n        this.pushUndo({ type: 'deleteTasks', tasks: tasks, dependencies: [...deletedDependencies] });\n        this.deleteFromStorage([...deletedTasks, ...deletedDependencies])\n    }\n    createDependency(requiredITask: ITask, requiredByITask: ITask): IDependency {\n        if (requiredITask.getRequired().has(requiredByITask.getId())) {\n            return requiredITask.getRequired().get(requiredByITask.getId())!;\n        }\n\n        const requiredTask = requiredITask instanceof Task ? requiredITask : allTasks.get(requiredITask.getId());\n        if (!requiredTask) throw new Error('Required task does not exist');\n\n        const requiredByTask = requiredByITask instanceof Task ? requiredByITask : allTasks.get(requiredByITask.getId());\n        if (!requiredByTask) throw new Error('Required by task does not exist');\n\n        const dependency = new Dependency(requiredTask, requiredByTask);\n        allDependencies.set(requiredTask.id, requiredByTask.id, dependency);\n        requiredTask.requiredByDependencies.set(requiredByTask.id, dependency);\n        requiredByTask.requiredDependencies.set(requiredTask.id, dependency);\n\n        const arrow = this.presenter.addDependency(dependency);\n        dependency.arrow = arrow;\n\n        this.pushUndo({ type: 'addDependency', from: requiredTask.getId(), to: requiredByTask.getId() });\n        this.saveToStorage(dependency);\n        return dependency;\n    }\n    deleteDependency(iDependency: IDependency, detachFromTasks: boolean = true, skipUndo: boolean = false): void {\n        const dependency = iDependency instanceof Dependency ? iDependency : allDependencies.get(iDependency.getRequiredTask().getId(), iDependency.getRequiredByTask().getId());\n        if (dependency) {\n            const requiredITask = dependency.getRequiredTask();\n            const requiredByITask = dependency.getRequiredByTask();\n            if (detachFromTasks) {\n                const requiredTask = requiredITask instanceof Task ? requiredITask : allTasks.get(requiredITask.getId());\n                if (!requiredTask) throw new Error('Required task does not exist');        \n                const requiredByTask = requiredByITask instanceof Task ? requiredByITask : allTasks.get(requiredByITask.getId());\n                if (!requiredByTask) throw new Error('Required by task does not exist');        \n                requiredTask.requiredByDependencies.delete(requiredByTask.getId());\n                requiredByTask.requiredDependencies.delete(requiredTask.getId());\n            }\n            allDependencies.delete(requiredITask.getId(), requiredByITask.getId());\n            this.presenter.removeDependency(dependency);\n            \n            if (!skipUndo) {\n                this.pushUndo({ type: 'deleteDependency', from: requiredITask.getId(), to: requiredByITask.getId() });\n            }\n            this.deleteFromStorage(dependency);\n        }\n    }\n\n    //----------------------------------------------\n    // Pause & Unpause\n    //----------------------------------------------\n    pauseCanvas(): void {\n        this.presenter.pauseCanvas();\n        this.canvasIsPaused = true;\n    }\n    unpauseCanvas(): void {\n        this.presenter.unpauseCanvas();\n        this.canvasIsPaused = false;\n    }\n\n    //----------------------------------------------\n    // Undo & Redo\n    //----------------------------------------------\n    pushUndo(action: any): void {\n        // TODO: Implement undo logic\n    }\n    undo(): boolean {\n        throw new Error('Method not implemented.');\n    }\n    redo(): boolean {\n        throw new Error('Method not implemented.');\n    }\n\n    //----------------------------------------------\n    // Save & Load\n    //----------------------------------------------\n    async requestConnectionToStorage(doPause: boolean = true): Promise<IStorageProvider | null> {\n        if (this.storageConnectionProviders.length === 1) {\n            const storageConnectionProvider = this.storageConnectionProviders[0];\n\n            // Pause canvas if requested\n            if (doPause) this.pauseCanvas();\n\n            // New or existing canvas\n            const newOrExisting = await this.presenter.showModal(\"New or Existing Canvas\", \"Would you like to create a new canvas or load an existing one?\", [\n                ['NEW', \"New Canvas\"],\n                ['LOAD', \"Open Canvas\"]\n            ]);\n            const isNew = newOrExisting === 'NEW';\n            \n            // Authenticate\n            const authenticated = await storageConnectionProvider.requestAuthentication();\n            if (authenticated) {\n                this.storageProvider = await storageConnectionProvider.requestConnection(isNew);\n            }\n\n            // Unpause canvas if paused\n            if (doPause) this.unpauseCanvas();\n\n            return this.storageProvider;\n        }\n        if (this.storageConnectionProviders.length === 0) {\n            throw new Error('No storage connection providers available');\n        }\n        throw new Error('Multiple storage connection providers - not yet implemented');\n    }    \n    async load(doPause: boolean = true): Promise<void> {\n        if (!this.storageProvider) throw new Error('No storage provider connected');\n\n        // Pause canvas if requested\n        if (doPause) this.pauseCanvas();\n        \n        // Load tasks\n        const data = await this.storageProvider.retrieveCanvasData();\n        data.tasks.forEach((taskData): void => {\n            const task = new Task({\n                id: taskData.id,\n                title: taskData.title,\n                description: taskData.description,\n                position: CanvasCoords.new(taskData.position.x, taskData.position.y),\n                completed: taskData.completed,\n                collapsed: taskData.collapsed\n            });\n            allTasks.set(task.id, task);\n            this.presenter.addTaskToCanvas(task);\n        });\n\n        // Load dependencies\n        data.dependencies.forEach((depData): void => {\n            const requiredTask = allTasks.get(depData.requiredTaskId);\n            const requiredByTask = allTasks.get(depData.requiredByTaskId);\n            if (!requiredTask || !requiredByTask) return;\n\n            const dependency = new Dependency(requiredTask, requiredByTask);\n            allDependencies.set(requiredTask.id, requiredByTask.id, dependency);\n            requiredTask.requiredByDependencies.set(requiredByTask.id, dependency);\n            requiredByTask.requiredDependencies.set(requiredTask.id, dependency);\n\n            const arrow = this.presenter.addDependency(dependency);\n            dependency.arrow = arrow;\n        });\n\n        // TODO: Implement saving and loading of canvas pan and zoom\n        //this.presenter.setCanvasPan(data.pan);\n        //this.presenter.setCanvasZoom(data.zoom);\n\n        // Unpause canvas if paused\n        if (doPause) this.unpauseCanvas();\n\n    }\n    private saveToStorage(entities: Task | Dependency | ReadonlyArray<Task | Dependency>): void {\n        if (!this.storageProvider) console.warn('No storage provider connected');\n        else if (Array.isArray(entities)) this.storageProvider.saveMany(entities.map(e => e.toStorageModel()));\n        else if (entities instanceof Task) this.storageProvider.saveTask(entities.toStorageModel());\n        else if (entities instanceof Dependency) this.storageProvider.saveDependency(entities.toStorageModel());\n    }\n    private deleteFromStorage(entities: Task | Dependency | ReadonlyArray<Task | Dependency>): void {\n        if (!this.storageProvider) console.warn('No storage provider connected');\n        else if (Array.isArray(entities)) this.storageProvider.deleteMany(entities.map(e => e.toStorageModel()));\n        else if (entities instanceof Task) this.storageProvider.deleteTask(entities.toStorageModel());\n        else if (entities instanceof Dependency) this.storageProvider.deleteDependency(entities.toStorageModel());\n    }\n\n}\n", "/**\n * The MouseInputInterpreter is a module that interprets raw mouse events into \"virtual\" events,\n * such as 'mousedown' (after crossing a drag threshold), 'mouseup', 'click', 'dblclick',\n * 'contextmenu', and 'mousemove'. This provides a unified way of handling mouse interactions\n * with threshold-based drag detection and debounced double-click detection.\n */\nexport const MouseInputInterpreter = (function () {\n    /** A function reference used to propagate virtual events to an external consumer. */\n    let callback: ((ve: any) => void) | null = null;\n\n    /** Stores the last mousedown event from the left button. */\n    let leftMouseDownEvent: MouseEvent | null = null;\n\n    /** Stores the last mousedown event from the right button. */\n    let rightMouseDownEvent: MouseEvent | null = null;\n\n    /**\n     * Stores information needed to determine whether a single click could turn into a double-click.\n     * Holds the event object and a timestamp.\n     */\n    let lastClickData: { event: MouseEvent; time: number } | null = null;\n\n    /** Tracks whether a left-button drag has started after crossing the drag threshold. */\n    let leftDragStarted = false;\n\n    /** Tracks whether a right-button drag has started after crossing the drag threshold. */\n    let rightDragStarted = false;\n\n    /** Movement threshold (pixels) to interpret a mousedown as a drag rather than a click. */\n    const dragThreshold = 5;\n\n    /** Delay (ms) to detect a double-click event between two clicks. */\n    const dblClickDelay = 200;\n\n    /** A flag to ensure we only add global event listeners once. */\n    let listenersAdded = false;\n\n    /**\n     * Called when a mouse button is pressed down.\n     * We do not immediately emit a mousedown event for left or right buttons here.\n     * Instead, we wait until the mouse has moved beyond the drag threshold (in onMouseMove).\n     *\n     * @param {MouseEvent} e The raw MouseEvent object.\n     * @returns {void}\n     */\n    function onMouseDown(e: MouseEvent): void {\n        if (e.button === 0) {\n            // Left mouse button pressed: track the event but do not immediately emit.\n            leftMouseDownEvent = e;\n            leftDragStarted = false;\n        } else if (e.button === 2) {\n            // Right mouse button pressed: track the event but do not immediately emit.\n            rightMouseDownEvent = e;\n            rightDragStarted = false;\n        }\n    }\n\n    /**\n     * Called whenever the mouse moves.\n     * Always emits a 'mousemove' virtual event.\n     * Checks if a drag should be started for the left or right button if they've been pressed.\n     *\n     * @param {MouseEvent} e The raw MouseEvent object.\n     * @returns {void}\n     */\n    function onMouseMove(e: MouseEvent): void {\n        // Always emit a virtual 'mousemove' event.\n        safeCallback(createVirtualEvent('mousemove', e));\n\n        // If left mouse is down but we've not started a drag, check distance moved.\n        if (leftMouseDownEvent && !leftDragStarted) {\n            const dx = e.clientX - leftMouseDownEvent.clientX;\n            const dy = e.clientY - leftMouseDownEvent.clientY;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n\n            // If distance > threshold, emit a 'mousedown' to signify drag has started.\n            if (distance > dragThreshold) {\n                leftDragStarted = true;\n                safeCallback(createVirtualEvent('mousedown', leftMouseDownEvent));\n            }\n        }\n\n        // If right mouse is down but we've not started a drag, check distance moved.\n        if (rightMouseDownEvent && !rightDragStarted) {\n            const dx = e.clientX - rightMouseDownEvent.clientX;\n            const dy = e.clientY - rightMouseDownEvent.clientY;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n\n            // If distance > threshold, emit a 'mousedown' to signify drag has started.\n            if (distance > dragThreshold) {\n                rightDragStarted = true;\n                safeCallback(createVirtualEvent('mousedown', rightMouseDownEvent));\n            }\n        }\n    }\n\n    /**\n     * Called when a mouse button is released.\n     * Depending on whether a drag was started or not, emits the appropriate event:\n     * - 'mouseup' if a drag was in progress,\n     * - 'click' if no drag and no double-click within the dblClickDelay timeframe,\n     * - 'dblclick' if within the dblClickDelay timeframe,\n     * - 'contextmenu' if right mouse button was not dragged,\n     * - or a generic 'mouseup' for other buttons.\n     *\n     * @param {MouseEvent} e The raw MouseEvent object.\n     * @returns {void}\n     */\n    function onMouseUp(e: MouseEvent): void {\n        const now = Date.now();\n\n        if (e.button === 0) {\n            // Left button release\n            if (leftDragStarted) {\n                // If we already started dragging, just emit a 'mouseup'\n                safeCallback(createVirtualEvent('mouseup', e));\n            } else {\n                // Minimal movement -> could be click or part of a double-click\n                if (lastClickData && now - lastClickData.time < dblClickDelay) {\n                    // If we have a recent click in memory, emit 'dblclick'\n                    safeCallback(createVirtualEvent('dblclick', e));\n                    lastClickData = null;\n                } else {\n                    // Otherwise, store this click and wait to see if another comes soon\n                    lastClickData = { event: e, time: now };\n                    setTimeout(() => {\n                        // If double-click didn't occur within dblClickDelay, emit a single 'click'\n                        if (lastClickData && Date.now() - lastClickData.time >= dblClickDelay) {\n                            safeCallback(createVirtualEvent('click', e));\n                            lastClickData = null;\n                        }\n                    }, dblClickDelay);\n                }\n            }\n            leftMouseDownEvent = null;\n            leftDragStarted = false;\n        } else if (e.button === 2) {\n            // Right button release\n            if (rightDragStarted) {\n                // If a drag was started, just emit a 'mouseup'\n                safeCallback(createVirtualEvent('mouseup', e));\n            } else {\n                // If no drag, interpret this as a 'contextmenu'\n                safeCallback(createVirtualEvent('contextmenu', e));\n            }\n            rightMouseDownEvent = null;\n            rightDragStarted = false;\n        } else {\n            // For any other button, just emit a 'mouseup'\n            safeCallback(createVirtualEvent('mouseup', e));\n        }\n    }\n\n    /**\n     * Creates and returns a \"virtual\" event object based on the original MouseEvent.\n     * These objects contain standardized data such as clientX, clientY, pageX, pageY, and the button number.\n     *\n     * @param {string} type The type of the virtual event (e.g. 'mousemove', 'mouseup', etc.).\n     * @param {MouseEvent} originalEvent The original MouseEvent that triggered this virtual event.\n     * @returns {object} A virtual event containing standardized mouse coordinates and references.\n     */\n    function createVirtualEvent(type: string, originalEvent: MouseEvent): any {\n        return {\n            type: type,\n            button: originalEvent.button,\n            clientX: originalEvent.clientX,\n            clientY: originalEvent.clientY,\n            pageX:\n                originalEvent.pageX !== undefined\n                    ? originalEvent.pageX\n                    : originalEvent.clientX + window.scrollX,\n            pageY:\n                originalEvent.pageY !== undefined\n                    ? originalEvent.pageY\n                    : originalEvent.clientY + window.scrollY,\n            target: originalEvent.target,\n            originalEvent: originalEvent,\n        };\n    }\n\n    /**\n     * Safely invokes the user-provided callback with the given virtual event object.\n     * Any errors thrown by the callback are caught and logged to the console,\n     * preventing them from interfering with other event processing.\n     *\n     * @param {any} ve The virtual event object to pass to the callback.\n     * @returns {void}\n     */\n    function safeCallback(ve: any): void {\n        if (typeof callback === 'function') {\n            try {\n                callback(ve);\n            } catch (error) {\n                console.error(\"InputInterpreter callback error:\", error);\n            }\n        }\n    }\n\n    /**\n     * Initializes the MouseInputInterpreter with a callback function.\n     * The callback will receive \"virtual\" mouse events such as 'mousemove', 'mousedown', 'mouseup',\n     * 'click', 'dblclick', and 'contextmenu'.\n     *\n     * @param {(ve: any) => void} cb A callback function that receives virtual mouse events.\n     * @throws {Error} If the provided argument is not a function.\n     * @returns {void}\n     */\n    function init(cb: (ve: any) => void): void {\n        if (typeof cb !== 'function') {\n            throw new Error(\"MouseInputInterpreter.init requires a callback function\");\n        }\n        callback = cb;\n\n        // Add the necessary event listeners if not already added.\n        if (!listenersAdded) {\n            document.addEventListener('mousedown', onMouseDown);\n            document.addEventListener('mousemove', onMouseMove);\n            document.addEventListener('mouseup', onMouseUp);\n            listenersAdded = true;\n        }\n    }\n\n    /**\n     * Removes the event listeners and resets the internal state.\n     * This should be called when the MouseInputInterpreter is no longer needed.\n     *\n     * @returns {void}\n     */\n    function destroy(): void {\n        if (listenersAdded) {\n            document.removeEventListener('mousedown', onMouseDown);\n            document.removeEventListener('mousemove', onMouseMove);\n            document.removeEventListener('mouseup', onMouseUp);\n            listenersAdded = false;\n        }\n        callback = null;\n        leftMouseDownEvent = null;\n        rightMouseDownEvent = null;\n        lastClickData = null;\n        leftDragStarted = false;\n        rightDragStarted = false;\n    }\n\n    // Expose public methods.\n    return {\n        init,\n        destroy,\n    };\n})();\n", "import { Vector2D } from \"../../Abstract/Math\";\nimport { Arrow } from \"../../Interfaces/IPresenter\";\nimport { ITask } from \"../../Interfaces/ITask\";\nimport { CanvasCoords, ScreenCoords, SizeOnScreen } from \"../../Presenter/CoordinateSystem\";\n\nexport class ControlStateManager {\n  public mousePosition: ScreenCoords = ScreenCoords.zero;\n  public mouseMovement: SizeOnScreen = new SizeOnScreen(Vector2D.zero);\n  public leftPressed: boolean = false;\n  public rightPressed: boolean = false;\n  public middlePressed: boolean = false;\n  public leftDownScreenPosition: ScreenCoords = ScreenCoords.zero;\n  public rightDownScreenPosition: ScreenCoords = ScreenCoords.zero;\n  public middleDownScreenPosition: ScreenCoords = ScreenCoords.zero;\n  public leftDownCanvasPosition: CanvasCoords | null = null;\n  public rightDownCanvasPosition: CanvasCoords | null = null;\n  public middleDownCanvasPosition: CanvasCoords | null = null;\n  public keys: { [key: string]: boolean } = {};\n  public lastEvent: Event | null = null;\n  public target: EventTarget | null = null;\n  public taskInTitleEditMode: ITask | null = null;\n  public taskInDescriptionEditMode: ITask | null = null;\n  public taskHeldByMouse: ITask | null = null;\n  public taskHeldByMouseOriginalCanvasPosition: CanvasCoords = CanvasCoords.zero;\n  public taskHeldByMouseCurrentCanvasPosition: CanvasCoords = CanvasCoords.zero;\n  public selectedTasks: Set<ITask> = new Set<ITask>();\n  public selectionBoxStart: ScreenCoords = ScreenCoords.zero;\n  public contextMenuContext: ContextMenuContext | null = null;\n  public dependencyCreationContext: DependencyCreationContext | null = null;\n  public taskTitleEditContext: TaskTitleEditContext | null = null;\n  public taskDescriptionEditContext: TaskDescriptionEditContext | null = null;\n  public canvasPanningContext: CanvasPanningContext | null = null;\n  public mouseIsHoldingDependencyArrow: boolean = false;\n  public mouseIsHoldingSingleTask: boolean = false;\n  public mouseIsHoldingTaskGroup: boolean = false;\n  public mouseIsHoldingCanvas: boolean = false;\n  public mouseIsDrawingSelectionBox: boolean = false;\n  public taskGroupAnchor?: ITask;\n  public taskGroupOriginalPositions?: Map<ITask, CanvasCoords>;\n  public taskGroupAnchorOriginalMouseCanvasPosition?: CanvasCoords;\n}\n\n/** Holds context for an open context menu. */\nexport interface ContextMenuContext {\n  /** The target of the event that triggered the context menu */\n  target: EventTarget | null;\n  /** The screen position where the context menu was opened */\n  position: ScreenCoords;\n  /** The task associated with the context menu */\n  task?: ITask;\n  /** The dependency associated with the context menu */\n  dependency?: any;\n}\n\n/** Holds context for a dependency creation operation. */\nexport interface DependencyCreationContext {\n  /** The first task in the dependency creation operation */\n  firstTask: ITask;\n  /** Whether the first task is required by the second task */\n  firstTaskIsRequiredTask: boolean;\n  /** A reference to the ghost arrow being dragged */\n  ghostArrow: Arrow;\n}\n\n/** Holds context for a task title edit operation. */\nexport interface TaskTitleEditContext {\n  /** The task being edited */\n  task: ITask;\n  /** The original title of the task */\n  originalTitle: string;\n}\n\n/** Holds context for a task description edit operation. */\nexport interface TaskDescriptionEditContext {\n  /** The task being edited */\n  task: ITask;\n  /** The original description of the task */\n  originalDescription: string;\n}\n\n/** Holds context for a canvas panning operation. */\nexport interface CanvasPanningContext {\n  /** The original position of the canvas */\n  originalPosition: CanvasCoords;\n  /** The original position of the mouse */\n  originalMousePosition: ScreenCoords;\n}", "import { IControllerPresenter, Arrow, TaskComponent } from '../../Interfaces/IPresenter';\nimport { IApp } from '../../Interfaces/IApp';\nimport { MouseInputInterpreter } from './MouseInputInterpreter';\nimport { ITask } from '../../Interfaces/ITask';\nimport { CanvasCoords, ScreenCoords, SizeOnScreen } from '../../Presenter/CoordinateSystem';\nimport { ControlStateManager } from './ControlStateManager';\n\n//--------------------------------------------------------------------------------------------\n// Constants\n//--------------------------------------------------------------------------------------------\n\n/** The size of the snap grid in pixels. */\nconst SNAP_GRID_SIZE = 40;\n\n/** The minimum distance between a task and a grid line for snapping to occur. */\nconst SNAP_DISTANCE = 6;\n\n//--------------------------------------------------------------------------------------------\n// Controller\n//--------------------------------------------------------------------------------------------\n\nexport class AppController {\n  private app: IApp;\n  private presenter: IControllerPresenter;\n  private controlState: ControlStateManager = new ControlStateManager();\n\n  constructor(app: IApp, presenter: IControllerPresenter) {\n    this.app = app;\n    this.presenter = presenter;\n    this.init();\n  }\n\n  // Initialize input listeners\n  private init(): void {\n    \n    // Disable the browser's default context menu\n    document.addEventListener('contextmenu', (e: MouseEvent): void => {\n      e.preventDefault();\n    }, true);\n\n    // Initialize mouse input interpreter with virtual event callback.\n    MouseInputInterpreter.init((virtualEvent: any) => {\n      this.updateControlState(virtualEvent);\n    });\n\n    // Listen for keyboard events.\n    ['keydown', 'keyup'].forEach(evt => {\n      document.addEventListener(evt, e => this.updateControlState(e));\n    });\n    \n  }\n\n  /** Updates the global control state based on an event and interprets the resulting intent.\n   * @param e the event to process\n   */\n  private updateControlState(\n    e: Event & {\n      clientX?: number;\n      clientY?: number;\n      movementX?: number;\n      movementY?: number;\n      button?: number;\n      type: string;\n      key?: string;\n      target: EventTarget | null;\n    }\n  ): void {\n    this.controlState.lastEvent = e;\n    if (e.clientX !== undefined && e.clientY !== undefined) {\n      this.controlState.mousePosition = ScreenCoords.new(e.clientX, e.clientY);\n    }\n    this.controlState.mouseMovement = SizeOnScreen.new(e.movementX || 0, e.movementY || 0);\n    this.controlState.target = e.target;\n\n    // Process mouse button and keyboard events.\n    if (e.type === 'mousedown') {\n      if (e.button === 0) {\n        this.controlState.leftPressed = true;\n        this.controlState.leftDownScreenPosition = this.controlState.mousePosition;\n        this.controlState.leftDownCanvasPosition = this.controlState.mousePosition.toCanvasCoords();\n      }\n      else if (e.button === 2) {\n        this.controlState.rightPressed = true;\n        this.controlState.rightDownScreenPosition = this.controlState.mousePosition;\n        this.controlState.rightDownCanvasPosition = this.controlState.mousePosition.toCanvasCoords();\n      }\n      else if (e.button === 1) {\n        this.controlState.middlePressed = true;\n        this.controlState.middleDownScreenPosition = this.controlState.mousePosition;\n        this.controlState.middleDownCanvasPosition = this.controlState.mousePosition.toCanvasCoords();\n      }\n    }\n    else if (e.type === 'mouseup') {\n      if (e.button === 0)\n        this.controlState.leftPressed = false;\n      else if (e.button === 2)\n        this.controlState.rightPressed = false;\n      else if (e.button === 1)\n        this.controlState.middlePressed = false;\n    }\n    else if (e.type === 'keydown') {\n      if (e.key) this.controlState.keys[e.key] = true;\n    }\n    else if (e.type === 'keyup') {\n      if (e.key) this.controlState.keys[e.key] = false;\n    }\n\n    // After updating state, interpret the intent.\n    this.interpretIntent();\n  }\n\n  //--------------------------------------------------------------------------------------------\n  // Intent Interpretation\n  //--------------------------------------------------------------------------------------------\n\n  /** Interprets the current intent based on the latest event and control state. */\n  private interpretIntent(): void {\n    const e = this.controlState.lastEvent;\n    if (!e) return;\n\n    // If the canvas is paused, the presenter has control.\n    if (this.app.isCanvasPaused()) return;\n\n    // Special State: Context Menu is Open\n    if (this.controlState.contextMenuContext) {\n      if (e.type === 'click' || e.type === 'dblclick' || e.type === 'mouseup') {\n        this.handleContextMenuSelection();\n        return;\n      }\n      else if (e.type === 'contextmenu') {\n        const selected = this.handleContextMenuSelection();\n\n        // Only return if an option was selected, otherwise we continue to allow another context menu to open.\n        if (selected) return;\n      }\n    }\n\n    // Special State: Holding Ghost (Dependency) Arrow\n    if (this.controlState.dependencyCreationContext) {\n      const context = this.controlState.dependencyCreationContext;\n      if (e.type === 'mousemove') {\n        const taskOrCursorScreenPosition = this.presenter.getTask(this.controlState.target as Element) ?? this.controlState.mousePosition.toCanvasCoords();\n        if (context.firstTaskIsRequiredTask) {\n          this.presenter.updateArrow(context.ghostArrow, { target: taskOrCursorScreenPosition, isGhostArrow: true });\n        }\n        else {\n          this.presenter.updateArrow(context.ghostArrow, { source: taskOrCursorScreenPosition, isGhostArrow: true });\n        }\n      }\n\n      // Create a dependency on left-click\n      else if (e.type === 'click' && (e as MouseEvent).button === 0) {\n        const secondTask = this.presenter.getTask(this.controlState.target as Element);\n        if (secondTask) {\n          if (context.firstTaskIsRequiredTask) {\n            this.app.createDependency(context.firstTask, secondTask);\n          } else {\n            this.app.createDependency(secondTask, context.firstTask);\n          }\n        }\n\n        // Remove the ghost arrow from the canvas if it exists.\n        this.presenter.removeArrow(context.ghostArrow);\n\n        // Clear dependency creation state.\n        this.controlState.dependencyCreationContext = null;\n        this.controlState.mouseIsHoldingDependencyArrow = false;\n        return;\n      }\n\n      // Cancel Dependency Creation on right-click or Escape.\n      else if (\n        (e.type === 'contextmenu' && (e as MouseEvent).button === 2) ||\n        (e.type === 'keydown' && (e as KeyboardEvent).key === 'Escape')\n      ) {\n        // Remove the ghost arrow from the canvas if it exists.\n        this.presenter.removeArrow(context.ghostArrow);\n\n        // Clear dependency creation state.\n        this.controlState.dependencyCreationContext = null;\n        this.controlState.mouseIsHoldingDependencyArrow = false;\n        return;\n      }\n\n      return;\n    }\n\n    // Special State: Holding Canvas (Panning)\n    if (this.controlState.mouseIsHoldingCanvas) {\n      if (e.type === 'mousemove') {\n        const movement = this.controlState.mouseMovement;\n        this.presenter.panCanvas(movement);\n      }\n      else if (e.type === 'mouseup' && (e as MouseEvent).button === 2) {\n        this.controlState.mouseIsHoldingCanvas = false;\n      }\n      return;\n    }\n\n    // Special State: Holding Single Task\n    if (this.controlState.mouseIsHoldingSingleTask) {\n\n      // Drag a Task\n      if (e.type === 'mousemove') {\n        const mouseCanvasPos = this.controlState.mousePosition.toCanvasCoords();\n        const canvasDragVector = mouseCanvasPos.subtractCoords(this.controlState.leftDownCanvasPosition!);\n        const orig = this.controlState.taskHeldByMouseOriginalCanvasPosition;\n        let newCanvasPos = orig.add(canvasDragVector);\n\n        // Snap to Grid (unless Alt key is held)\n        if (SNAP_GRID_SIZE > 0 && !this.controlState.keys['Alt']) {\n          const snapX = Math.round(newCanvasPos.x / SNAP_GRID_SIZE) * SNAP_GRID_SIZE;\n          const snapY = Math.round(newCanvasPos.y / SNAP_GRID_SIZE) * SNAP_GRID_SIZE;\n          const dx = Math.abs(newCanvasPos.x - snapX);\n          const dy = Math.abs(newCanvasPos.y - snapY);\n          newCanvasPos = CanvasCoords.new(\n            dx < SNAP_DISTANCE ? snapX : newCanvasPos.x,\n            dy < SNAP_DISTANCE ? snapY : newCanvasPos.y\n          );\n        }\n\n        this.controlState.taskHeldByMouseCurrentCanvasPosition = newCanvasPos;\n        this.presenter.moveTask(this.controlState.taskHeldByMouse!, newCanvasPos, false);\n      }\n\n      // Drop a Task\n      else if (e.type === 'mouseup' && (e as MouseEvent).button === 0) {\n        if (this.controlState.taskHeldByMouse) {\n          this.app.moveTasks([{ task: this.controlState.taskHeldByMouse, position: this.controlState.taskHeldByMouseCurrentCanvasPosition }]);\n        }\n        this.controlState.mouseIsHoldingSingleTask = false;\n        this.controlState.taskHeldByMouse = null;\n      }\n\n      // Cancel Dragging a Task (Right-Click or Escape)\n      else if (\n        (e.type === 'contextmenu' && (e as MouseEvent).button === 2) ||\n        (e.type === 'keydown' && (e as KeyboardEvent).key === 'Escape')\n      ) {\n        if (this.controlState.taskHeldByMouse) {\n          this.presenter.moveTask(this.controlState.taskHeldByMouse, this.controlState.taskHeldByMouseOriginalCanvasPosition);\n        }\n        this.controlState.mouseIsHoldingSingleTask = false;\n        this.controlState.taskHeldByMouse = null;\n      }\n\n      return;\n    }\n\n    // Special State: Holding Task Group\n    if (this.controlState.mouseIsHoldingTaskGroup) {\n      if (e.type === 'mousemove') {\n        // Get the current canvas position of the mouse.\n        const mousePosOnCanvas = this.controlState.mousePosition.toCanvasCoords();\n\n        // Calculate the drag vector for the anchor relative to its initial mouse-down position.\n        let dragVector = mousePosOnCanvas.subtractCoords(this.controlState.taskGroupAnchorOriginalMouseCanvasPosition!);\n\n        // Compute the new position for the anchor based on its original position plus the drag vector.\n        const origAnchorPos = this.controlState.taskGroupOriginalPositions!.get(this.controlState.taskGroupAnchor!)!;\n        let newAnchorPos = origAnchorPos.add(dragVector);\n\n        // Snap to Grid (unless Alt key is held)\n        if (SNAP_GRID_SIZE > 0 && !this.controlState.keys['Alt']) {\n          const snapX = Math.round(newAnchorPos.x / SNAP_GRID_SIZE) * SNAP_GRID_SIZE;\n          const snapY = Math.round(newAnchorPos.y / SNAP_GRID_SIZE) * SNAP_GRID_SIZE;\n          const dx = Math.abs(newAnchorPos.x - snapX);\n          const dy = Math.abs(newAnchorPos.y - snapY);\n          newAnchorPos = CanvasCoords.new(\n            dx < SNAP_DISTANCE ? snapX : newAnchorPos.x,\n            dy < SNAP_DISTANCE ? snapY : newAnchorPos.y\n          );\n        }\n\n        // Recalculate the drag vector after snapping.\n        dragVector = newAnchorPos.subtractCoords(origAnchorPos);\n\n        // Move the anchor to its new (possibly snapped) position.\n        this.presenter.moveTask(this.controlState.taskGroupAnchor!, newAnchorPos, false);\n\n        // Move each selected task by the same drag vector.\n        this.controlState.selectedTasks.forEach(task => {\n          if (task === this.controlState.taskGroupAnchor) return;\n          const origPos = this.controlState.taskGroupOriginalPositions!.get(task)!;\n          const newPos = origPos.add(dragVector);\n          this.presenter.moveTask(task, newPos, false);\n        });\n      }\n\n      // Drop the Task Group\n      else if (e.type === 'mouseup' && (e as MouseEvent).button === 0) {\n        const taskMovements: { task: ITask; position: CanvasCoords }[] = [];\n        this.controlState.selectedTasks.forEach(task => {\n          const pos = this.presenter.getTaskPositionOnCanvas(task);\n          taskMovements.push({ task, position: pos });\n        });\n        this.app.moveTasks(taskMovements);\n        this.controlState.mouseIsHoldingTaskGroup = false;\n        delete this.controlState.taskGroupOriginalPositions;\n        delete this.controlState.taskGroupAnchor;\n        delete this.controlState.taskGroupAnchorOriginalMouseCanvasPosition;\n      }\n\n      // Cancel Dragging the Task Group (Right-Click or Escape)\n      else if (\n        (e.type === 'contextmenu' && (e as MouseEvent).button === 2) ||\n        (e.type === 'keydown' && (e as KeyboardEvent).key === 'Escape')\n      ) {\n        this.controlState.taskGroupOriginalPositions!.forEach((origPos, task) => {\n          this.presenter.moveTask(task, origPos);\n        });\n        this.controlState.mouseIsHoldingTaskGroup = false;\n        delete this.controlState.taskGroupOriginalPositions;\n        delete this.controlState.taskGroupAnchor;\n        delete this.controlState.taskGroupAnchorOriginalMouseCanvasPosition;\n      }\n      return;\n    }\n\n    // Special State: Drawing Selection Box\n    if (this.controlState.mouseIsDrawingSelectionBox) {\n      if (e.type === 'mousemove') {\n        const startPosition = this.controlState.selectionBoxStart;\n        const currentPosition = this.controlState.mousePosition;\n        this.presenter.moveSelectionBox(startPosition, currentPosition);\n      } \n      else if (e.type === 'mouseup' && (e as MouseEvent).button === 0) {\n        const startPosition = this.controlState.selectionBoxStart;\n        const currentPosition = this.controlState.mousePosition;\n        const tasksInArea = this.presenter.getTasksInArea(startPosition, currentPosition);\n        const deselect = this.controlState.keys['Alt'] || this.controlState.keys['Meta'];\n        for (const task of tasksInArea) {\n          if (deselect) {\n            this.deselectTask(task);\n          }\n          else {\n            this.selectTask(task);\n          }\n        }\n        this.releaseSelectionBox();\n      } \n      else if (e.type === 'contextmenu' && (e as MouseEvent).button === 2) {\n        this.releaseSelectionBox();\n      } \n      else if (e.type === 'keydown' && (e as KeyboardEvent).key === 'Escape') {\n        this.releaseSelectionBox();\n      }\n      return;\n    }\n\n    // Special State: Editing Task Title\n    if (this.controlState.taskTitleEditContext) {\n      const context = this.controlState.taskTitleEditContext;\n      \n      // Finish Editing Task Title (Enter Key or Click Away)\n      const finishEditingTaskTitle = (): void => {\n        const title = this.presenter.getTaskTitle(context.task);\n        this.presenter.toggleEditModeForTaskTitle(context.task, false);\n        if (title && title.length > 0) {\n          this.app.changeTaskTitle(context.task, title);\n        }\n        else {\n          this.presenter.setTaskTitle(context.task, context.originalTitle);\n        }\n        this.controlState.taskTitleEditContext = null;\n      };\n      if (e.type === 'keydown' && (e as KeyboardEvent).key === 'Enter') {\n        finishEditingTaskTitle();\n        return;\n      }\n      if (e.type === 'mousedown' || e.type === 'click' || e.type === 'dblclick' || e.type === 'contextmenu') {\n        const taskInfo = this.presenter.getTaskInfo(this.controlState.target as Element);\n        const targetWasTaskTitle = taskInfo?.task === context.task && taskInfo.component === TaskComponent.Title;\n\n        // We don't want to interfere with activity within the task title itself.\n        if (targetWasTaskTitle) return;\n\n        // If the user clicked anywhere else, finish editing the task title and continue processing the event.\n        finishEditingTaskTitle();\n      }\n\n      // Cancel Editing Task Title (Escape Key)\n      else if (e.type === 'keydown' && (e as KeyboardEvent).key === 'Escape') {\n        this.presenter.toggleEditModeForTaskTitle(context.task, false);\n        this.presenter.setTaskTitle(context.task, context.originalTitle);\n        this.controlState.taskTitleEditContext = null;\n        return;\n      }\n\n      // We don't return here, because some paths should continue to process the event.\n    }\n\n    // Special State: Editing Task Description\n    if (this.controlState.taskDescriptionEditContext) {\n      const context = this.controlState.taskDescriptionEditContext;\n      \n      // Finish Editing Task Description (Enter Key or Click Away)\n      const finishEditingTaskDescription = (): void => {\n        const description = this.presenter.getTaskDescription(context.task);\n        this.presenter.toggleEditModeForTaskDescription(context.task, false);\n        if (description && description.length > 0) {\n          this.app.changeTaskDescription(context.task, description);\n        }\n        else {\n          this.presenter.setTaskDescription(context.task, context.originalDescription);\n        }\n        this.controlState.taskDescriptionEditContext = null;\n      };\n      if (e.type === 'mousedown' || e.type === 'click' || e.type === 'dblclick' || e.type === 'contextmenu') {\n        const taskInfo = this.presenter.getTaskInfo(this.controlState.target as Element);\n        const targetWasTaskDescription = taskInfo?.task === context.task && taskInfo.component === TaskComponent.Description;\n\n        // We don't want to interfere with activity within the task description itself.\n        if (targetWasTaskDescription) return;\n\n        // If the user clicked anywhere else, finish editing the task description and continue processing the event.\n        finishEditingTaskDescription();\n      }\n\n      // Cancel Editing Task Description\n      else if (e.type === 'keydown' && (e as KeyboardEvent).key === 'Escape') {\n        this.presenter.toggleEditModeForTaskDescription(context.task, false);\n        this.presenter.setTaskDescription(context.task, context.originalDescription);\n        this.controlState.taskDescriptionEditContext = null;\n        return;\n      }\n    }\n\n    // Normal State: No Special State (from here on)\n\n    if (e.type === 'mousedown') {\n      if ((e as MouseEvent).button === 0) {\n        const taskInfo = this.presenter.getTaskInfo(this.controlState.target as Element);\n        const eTask = taskInfo ? taskInfo.task : null;\n\n        // Grab a Task (or Task Group)\n        if (eTask) {\n          let taskIsPartOfSelection = this.controlState.selectedTasks.has(eTask);\n          if (!taskIsPartOfSelection && this.controlState.keys['Shift']) {\n            this.selectTask(eTask);\n            taskIsPartOfSelection = true;\n          }\n\n          if (taskIsPartOfSelection) {\n            this.tryGrabTaskGroup(eTask);\n            return;\n          }\n          else {\n            this.tryGrabSingleTask(eTask);\n            return;\n          }\n        }\n\n        // Start Drawing a Selection Box\n        else {\n          if (this.tryGrabSelectionBox()) {\n\n            // Deselect all tasks if Shift key is not held\n            if (!this.controlState.keys['Shift']) {\n              this.deselectAllTasks();\n            }\n\n            return;\n          }\n        }\n      }\n\n      // Grab the Canvas\n      else if ((e as MouseEvent).button === 2) {\n        this.tryGrabCanvas();\n        return;\n      }\n\n      return;\n    }\n\n    // Left-Click or Double-Click\n    if ((e.type === 'click' || e.type === 'dblclick') && (e as MouseEvent).button === 0) {\n      const taskInfo = this.presenter.getTaskInfo(this.controlState.target as Element);\n      const eTask = taskInfo ? taskInfo.task : null;\n\n      // Toggle Task Selection (Shift-Click)\n      if (eTask && this.controlState.keys['Shift']) {\n        if (this.controlState.selectedTasks.has(eTask)) {\n          this.deselectTask(eTask);\n        }\n        else {\n          this.selectTask(eTask);\n        }\n        return;\n      }\n\n      this.deselectAllTasks();\n\n      if (eTask) {\n\n        // Toggle Expand/Collapse Task (Double-Click on Task Header)\n        if (e.type === 'dblclick' && taskInfo!.component === TaskComponent.Header) {\n          this.app.toggleTaskExpansion(eTask, null);\n          return;\n        }\n\n        // Edit Task Title\n        if (taskInfo!.component === TaskComponent.Title) {\n          const originalTitle = taskInfo!.task.getTitle();\n          this.presenter.toggleEditModeForTaskTitle(eTask, true);\n          this.controlState.taskTitleEditContext = {\n            task: eTask,\n            originalTitle\n          };\n          return;\n        }\n\n        // Edit Task Description\n        if (taskInfo!.component === TaskComponent.Description) {\n          const originalDescription = taskInfo!.task.getDescription();\n          this.presenter.toggleEditModeForTaskDescription(eTask, true);\n          this.controlState.taskDescriptionEditContext = {\n            task: eTask,\n            originalDescription\n          };\n          return;\n        }\n\n        // Toggle Expand/Collapse Task (Button Click)\n        if (taskInfo!.component === TaskComponent.Collapse) {\n          this.app.toggleTaskExpansion(eTask, null);\n          return;\n        }\n\n        // Toggle Complete/Incomplete Task\n        if (taskInfo!.component === TaskComponent.Completion) {\n          this.app.toggleTaskCompletion(eTask, null);\n          return;\n        }\n\n        // Select Task (Single-Click)\n        if (e.type === 'click') {\n          this.selectTask(eTask);\n          return;\n        }\n\n      }\n\n      // Add Task (Double-Click)\n      else if (e.type === 'dblclick') {\n        const canvasPos = this.controlState.mousePosition.toCanvasCoords();\n\n        // (floor) Snap the mouse position to the grid.\n        const snappedPosition = CanvasCoords.new(\n          Math.floor(canvasPos.x / SNAP_GRID_SIZE) * SNAP_GRID_SIZE,\n          Math.floor(canvasPos.y / SNAP_GRID_SIZE) * SNAP_GRID_SIZE\n        );\n\n        this.app.createTask(snappedPosition);\n        return;\n      }\n\n      return;\n    }\n\n    // Right-Click (Context Menu)\n    if (e.type === 'contextmenu') {\n\n      // Show Task Context Menu\n      const taskInfo = this.presenter.getTaskInfo(this.controlState.target as Element);\n      const eTask = taskInfo ? taskInfo.task : null;\n      if (eTask) {\n        let options: [string, string][] = [\n          ['REQUIRES_DEPENDENCY', \"Requires Dependency\"],\n          ['REQUIRED_BY_DEPENDENCY', \"Required By Dependency\"]\n        ];\n        if (this.controlState.selectedTasks.has(eTask)) {\n          options.unshift(['DELETE_SELECTED_TASKS', \"Delete Selected Tasks\"]);\n        }\n        else {\n          options.unshift(['DELETE_TASK', \"Delete Task\"]);\n        }\n        this.presenter.showContextMenu(this.controlState.mousePosition, options);\n        this.controlState.contextMenuContext = {\n          target: this.controlState.target,\n          position: this.controlState.mousePosition,\n          task: eTask\n        };\n        return;\n      }\n\n      // Show Dependency Context Menu\n      const dependency = this.presenter.getDependency(this.controlState.target as Element);\n      if (dependency) {\n        this.presenter.showContextMenu(this.controlState.mousePosition, [['DELETE_DEPENDENCY', \"Delete Dependency\"]]);\n        this.controlState.contextMenuContext = {\n          target: this.controlState.target,\n          position: this.controlState.mousePosition,\n          dependency: dependency\n        };\n        return;\n      }\n\n      // Show Canvas Context Menu\n      else {\n        this.presenter.showContextMenu(this.controlState.mousePosition, [['ADD_TASK', \"Add Task\"]]);\n        this.controlState.contextMenuContext = {\n          target: this.controlState.target,\n          position: this.controlState.mousePosition\n        };\n        return;\n      }\n    }\n\n    if (e.type === 'keydown') {\n\n      // Select all tasks\n      if (this.controlState.keys['a'] && (this.controlState.keys['Control'] || this.controlState.keys['Meta'])) {\n        this.selectAllTasks();\n        return;\n      }\n\n      // Delete selected tasks\n      if (this.controlState.keys['Delete'] || this.controlState.keys['Backspace']) {\n        const tasksToDelete = Array.from(this.controlState.selectedTasks);\n        this.controlState.selectedTasks.clear();\n        this.app.deleteTasks(tasksToDelete);\n        return;\n      }\n\n      return;\n    }\n\n    return; // End of interpretIntent.\n  }\n\n  //--------------------------------------------------------------------------------------------\n  // Context Menu Selection\n  //--------------------------------------------------------------------------------------------\n\n  /** Handles a selection made from a context menu.\n   * @returns true if an option was selected, false otherwise\n   */\n  private handleContextMenuSelection(): boolean {\n    if (this.controlState.contextMenuContext === null) return false;\n    const context = this.controlState.contextMenuContext;\n\n    const option = this.presenter.getContextMenuOption(this.controlState.target as Element);\n    if (option === 'ADD_TASK') {\n      const canvasPos = context.position.toCanvasCoords();\n      this.app.createTask(canvasPos);\n    }\n    else if (option === 'DELETE_TASK') {\n      if (context.task) {\n        this.controlState.selectedTasks.delete(context.task);\n        this.app.deleteTasks([context.task]);\n      }\n    }\n    else if (option === 'DELETE_SELECTED_TASKS') {\n      const tasks = Array.from(this.controlState.selectedTasks);\n      this.controlState.selectedTasks.clear();\n      this.app.deleteTasks(tasks);\n    }\n    else if (option === 'REQUIRES_DEPENDENCY') {\n      if (!context.task) throw new Error('Task is null');\n      \n      this.tryGrabDependencyArrow(\n        context.task,\n        false\n      );\n    }\n    else if (option === 'REQUIRED_BY_DEPENDENCY') {\n      if (!context.task) throw new Error('Task is null');\n      \n      this.tryGrabDependencyArrow(\n        context.task,\n        true\n      );\n    }\n    else if (option === 'DELETE_DEPENDENCY') {\n      if (!context.dependency) throw new Error('Dependency is null');\n\n      this.app.deleteDependency(context.dependency);\n    }\n\n    // Reset context menu state.\n    this.controlState.contextMenuContext = null;\n\n    this.presenter.hideContextMenu();\n\n    return option != null;\n  }\n\n  //--------------------------------------------------------------------------------------------\n  // Holding and Releasing Objects\n  //--------------------------------------------------------------------------------------------\n\n  /** Checks whether the mouse is currently holding any object.\n   * @returns true if something is held, false otherwise\n   */\n  private mouseIsHoldingSomething(): boolean {\n    return (\n      this.controlState.mouseIsHoldingSingleTask ||\n      this.controlState.mouseIsHoldingTaskGroup ||\n      this.controlState.mouseIsHoldingCanvas ||\n      this.controlState.mouseIsHoldingDependencyArrow ||\n      this.controlState.mouseIsDrawingSelectionBox\n    );\n  }\n\n  /** Releases all current mouse holds and resets their state. */\n  private releaseAllMouseHolds(): void {\n    if (this.controlState.mouseIsHoldingDependencyArrow) {\n      this.controlState.mouseIsHoldingDependencyArrow = false;\n    }\n    if (this.controlState.mouseIsHoldingSingleTask) {\n      this.controlState.mouseIsHoldingSingleTask = false;\n      this.controlState.taskHeldByMouse = null;\n    }\n    if (this.controlState.mouseIsHoldingTaskGroup) {\n      this.controlState.mouseIsHoldingTaskGroup = false;\n    }\n    if (this.controlState.mouseIsHoldingCanvas) {\n      this.controlState.mouseIsHoldingCanvas = false;\n    }\n    if (this.controlState.mouseIsDrawingSelectionBox) {\n      this.releaseSelectionBox();\n    }\n  }\n\n  /** Attempts to grab a single task for dragging.\n   * @param task the task to grab\n   * @returns true if successful, false otherwise\n   */\n  private tryGrabSingleTask(task: ITask): boolean {\n    if (this.controlState.mouseIsHoldingSingleTask && this.controlState.taskHeldByMouse === task)\n      return true;\n    if (this.mouseIsHoldingSomething())\n      return false;\n\n    this.controlState.mouseIsHoldingSingleTask = true;\n    this.controlState.taskHeldByMouse = task;\n\n    // Move the task to the front for dragging\n    this.controlState.taskHeldByMouseOriginalCanvasPosition = this.presenter.getTaskPositionOnCanvas(task);\n    this.presenter.adjustTaskZPosition(task, CanvasCoords.zero);\n\n    return true;\n  }\n\n  /** Attempts to grab a group of tasks for group dragging.\n   * @param anchorTask the task to serve as the drag anchor\n   * @returns true if successful, false otherwise\n   */\n  private tryGrabTaskGroup(anchorTask: ITask): boolean {\n    if (this.controlState.mouseIsHoldingTaskGroup)\n      return true;\n    if (this.mouseIsHoldingSomething())\n      return false;\n    if (this.controlState.selectedTasks.size === 0)\n      return false;\n\n    this.controlState.mouseIsHoldingTaskGroup = true;\n    this.controlState.taskGroupAnchor = anchorTask;\n\n    // Bring the anchor task to the front.\n    this.presenter.adjustTaskZPosition(anchorTask, CanvasCoords.zero);\n\n    // Record the original positions of each selected task.\n    this.controlState.taskGroupOriginalPositions = new Map();\n    this.controlState.selectedTasks.forEach(task => {\n      this.controlState.taskGroupOriginalPositions!.set(task, this.presenter.getTaskPositionOnCanvas(task));\n    });\n\n    // Record the initial mouse position in canvas coordinates.\n    this.controlState.taskGroupAnchorOriginalMouseCanvasPosition = this.controlState.mousePosition.toCanvasCoords();\n    return true;\n  }\n\n  /** Attempts to grab the canvas for panning.\n   * @returns true if successful, false otherwise\n   */\n  private tryGrabCanvas(): boolean {\n    if (this.controlState.mouseIsHoldingCanvas)\n      return true;\n    if (this.mouseIsHoldingSomething())\n      return false;\n\n    this.controlState.mouseIsHoldingCanvas = true;\n    return true;\n  }\n\n  /** Attempts to start dependency arrow creation.\n   * @param firstTask the first task in the dependency\n   * @param taskIsRequired true if the first task is required by the second task\n   * @returns true if successful, false otherwise\n   */\n  private tryGrabDependencyArrow(firstTask: ITask, firstTaskIsRequiredTask: boolean): boolean {\n    if (this.controlState.mouseIsHoldingDependencyArrow)\n      return true;\n    if (this.mouseIsHoldingSomething())\n      return false;\n\n    this.controlState.mouseIsHoldingDependencyArrow = true;\n    const cursorPos = this.controlState.mousePosition.toCanvasCoords();\n    const arrowSource = firstTaskIsRequiredTask ? firstTask : cursorPos;\n    const arrowTarget = firstTaskIsRequiredTask ? cursorPos : firstTask;\n    const arrow = this.presenter.createArrow(arrowSource, arrowTarget);\n\n    this.controlState.dependencyCreationContext = {\n      firstTask: firstTask,\n      firstTaskIsRequiredTask: firstTaskIsRequiredTask,\n      ghostArrow: arrow\n    }\n\n    return true;\n  }\n\n  /** Attempts to start drawing a selection box.\n   * @returns true if successful, false otherwise\n   */\n  private tryGrabSelectionBox(): boolean {\n    if (this.controlState.mouseIsDrawingSelectionBox)\n      return true;\n    if (this.mouseIsHoldingSomething())\n      return false;\n    this.controlState.mouseIsDrawingSelectionBox = true;\n    this.controlState.selectionBoxStart = this.controlState.mousePosition;\n    const startPosition = this.controlState.selectionBoxStart;\n    const currentPosition = this.controlState.mousePosition;\n    this.presenter.moveSelectionBox(startPosition, currentPosition);\n    this.presenter.showSelectionBox();\n    return true;\n  }\n\n  /** Releases the selection box. */\n  private releaseSelectionBox(): void {\n    this.presenter.hideSelectionBox();\n    this.controlState.mouseIsDrawingSelectionBox = false;\n  }\n\n  /** Selects a task.\n   * @param task the task to select\n   */\n  private selectTask(task: ITask): void {\n    this.controlState.selectedTasks.add(task);\n    this.presenter.toggleTaskHighlight(task, true);\n  }\n\n  /** Selects all tasks (delegates to the presenter for retrieval). */\n  private selectAllTasks(): void {\n    const tasks = this.presenter.getAllTasks();\n    this.controlState.selectedTasks = new Set(tasks);\n    this.presenter.toggleAllTaskHighlights(true);\n  }\n\n  /** Deselects a task.\n   * @param task the task to deselect\n   */\n  private deselectTask(task: ITask): void {\n    this.controlState.selectedTasks.delete(task);\n    this.presenter.toggleTaskHighlight(task, false);\n  }\n\n  /** Deselects all tasks. */\n  private deselectAllTasks(): void {\n    this.controlState.selectedTasks.clear();\n    this.presenter.toggleAllTaskHighlights(false);\n  }\n}\n", "/** \n * The DependencyArrow module provides a way to create and manage \n * SVG-based arrows between two points or DOM elements, respecting \n * a grid-based routing system and optional zoom factor.\n * \n * @module DependencyArrow\n */\n\nimport { Rectangle, Vector2D } from \"../Abstract/Math\";\n\n/**\n * Represents the options available when creating an arrow.\n */\ninterface ArrowOptions {\n    /** The stroke/fill color of the arrow. */\n    color?: string;\n    /** The grid size used for routing calculations. */\n    gridSize?: number;\n    /** Whether to skip creating an undo action (not used here but available for external usage). */\n    skipUndo?: boolean;\n    /** The data-id attribute value for the arrow (not used here but available for external usage). */\n    dataId?: string;\n}\n\n/**\n * Represents the methods available on an arrow handler.\n */\nexport interface ArrowHandler {\n    /** The SVG element containing the arrow path. */\n    svg: SVGSVGElement;\n    /**\n     * Update the arrow with new start and end points or elements.\n     * \n     * This re-routes and redraws the arrow based on the newly provided endpoints, \n     * recalculating the bounding box and the path data. If the start or end \n     * is inside the other element's bounding box, the arrow is considered invalid \n     * and is hidden (display = 'none').\n     * \n     * @param newStart The new start point or HTML element.\n     * @param newEnd The new end point or HTML element.\n     * @param options Additional options (particularly the updated zoom factor).\n     */\n    update: (newStart: Vector2D | Rectangle, newEnd: Vector2D | Rectangle) => void;\n    /**\n     * Remove the arrow from the DOM.\n     */\n    remove: () => void;\n    /**\n     * Attach an event listener to the arrow's path element.\n     * \n     * @param type The event type to listen for, e.g. 'click'.\n     * @param listener The event handler callback.\n     * @param options Optional addEventListener options.\n     */\n    addEventListener: (\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions\n    ) => void;\n    /**\n     * Set the stroke/fill color of the arrow and its tip.\n     * \n     * @param newColor The new color value.\n     */\n    setColor: (newColor: string) => void;\n}\n\nexport const DependencyArrow = (function () {\n    let arrowCounter = 0;\n    const DEFAULT_GRID_SIZE = 20;\n    const DEFAULT_MARGIN = 10;\n    const FIXED_RADIUS = 10; // desired rounding radius for arrow corners\n    const ARROW_THICKNESS = 2;\n\n    /**\n     * Resolve an endpoint given its \"role\" ('start' or 'end').\n     * \n     * If the endpoint is an HTMLElement:\n     *  - role 'start': return the element's right edge with a 20px vertical offset\n     *  - role 'end': return the element's left edge with a 20px vertical offset\n     * \n     * Otherwise, treat the input as a Point, dividing coordinates by the zoom factor.\n     * \n     * @param input The endpoint which can be an HTMLElement or a Point-like object.\n     * @param role The role of the endpoint, either 'start' or 'end'.\n     * @returns A resolved Point in the parent's coordinate system.\n     */\n    function resolveEndpoint(\n        input: Vector2D | Rectangle,\n        role: 'start' | 'end'\n    ): Vector2D {\n        if (input instanceof Rectangle) {\n            return role === \"start\"\n                ? input.position.translate(input.size.x, 20)\n                : input.position.translate(0, 20);\n        }\n        else {\n            return input;\n        }\n    }\n\n    /**\n     * Compute the x-coordinate of the vertical line connecting two points.\n     * The vertical line is computed by finding the midpoint of the two points,\n     * and then rounding it to the nearest grid line.\n     * @param sx The x-coordinate of the start point.\n     * @param ex The x-coordinate of the end point.\n     * @param gridSize The grid size.\n     * @returns The x-coordinate of the vertical line.\n     */\n    function computeVerticalX(sx: number, ex: number, gridSize: number): number {\n        const mid = (sx + ex) / 2;\n        return Math.round(mid / gridSize) * gridSize;\n    }\n\n    /**\n     * Compute the polyline route from {@link S} to {@link E}.\n     * \n     * **Normal case** (when S.x <= E.x and there is at least 10px clearance on each side):\n     * \n     * The route leaves S horizontally and approaches E horizontally.\n     *  \n     * **Backtracking case** (when the clearance rule would be broken, S.x > E.x, or\n     * when the normal route would produce degenerate horizontal segments):\n     * \n     * A 5\u2011segment route is built:\n     * 1. Horizontal right from S (at least 10px, snapped to grid)\n     * 2. Vertical from S.y to the computed midpoint.\n     * 3. Horizontal left at that midpoint.\n     * 4. Vertical from the midpoint to E.y.\n     * 5. Horizontal right into E (with at least 10px clearance).\n     * \n     * For computing the vertical midpoint:\n     *   - If the start is an HTMLElement, use its bottom edge.\n     *   - If the end is an HTMLElement, use its top edge.\n     *   - Otherwise, use the provided coordinate values.\n     * \n     * @param S The start point (in parent coordinates).\n     * @param E The end point (in parent coordinates).\n     * @param gridSize The grid size for snapping coordinates.\n     * @param startElem The start element or coordinate input.\n     * @param endElem The end element or coordinate input.\n     * @returns An array of points describing the route, or undefined if the route can't be computed.\n     */\n    function computeRoute(\n        S: Vector2D,\n        E: Vector2D,\n        gridSize: number,\n        startElem: Vector2D | Rectangle,\n        endElem: Vector2D | Rectangle\n    ): Vector2D[] | undefined {\n        const minHorizontal = 10;\n        let route: Vector2D[] | undefined;\n\n        // Normal route\n        if (S.x <= E.x && (E.x - S.x >= 2 * minHorizontal)) {\n            const adjustedStartX = S.x + minHorizontal;\n            const adjustedEndX = E.x - minHorizontal;\n            const X_start = Math.ceil(adjustedStartX / gridSize) * gridSize;\n            const X_end = Math.floor(adjustedEndX / gridSize) * gridSize;\n\n            if (X_start < X_end) {\n                const X_mid = computeVerticalX(X_start, X_end, gridSize);\n                route = [\n                    S,\n                    new Vector2D(X_start, S.y),\n                    new Vector2D(X_mid, S.y),\n                    new Vector2D(X_mid, E.y),\n                    new Vector2D(X_end, E.y),\n                    E,\n                ];\n            } else if (X_start === X_end) {\n                route = [\n                    S,\n                    new Vector2D(X_start, S.y),\n                    new Vector2D(X_start, E.y),\n                    E\n                ];\n            }\n        }\n\n        // Fallback to backtracking route\n        if (!route) {\n            const X1 = Math.ceil((S.x + minHorizontal) / gridSize) * gridSize;\n            const X_final = Math.floor((E.x - minHorizontal) / gridSize) * gridSize;\n            const effectiveStartY =\n                startElem instanceof Rectangle\n                    ? startElem.bottom\n                    : S.y;\n            const effectiveEndY =\n                endElem instanceof Rectangle\n                    ? endElem.top\n                    : E.y;\n            const Y_mid = Math.round(((effectiveStartY + effectiveEndY) / 2) / gridSize) * gridSize;\n\n            route = [\n                S,\n                new Vector2D(X1, S.y),\n                new Vector2D(X1, Y_mid),\n                new Vector2D(X_final, Y_mid),\n                new Vector2D(X_final, E.y),\n                E,\n            ];\n        }\n\n        // Shift the last point by the stroke width to avoid overlap with the target element\n        if (route.length > 0) {\n            const last = route[route.length - 1];\n            if (last.x === E.x) {\n                route[route.length - 1] = last.translate(-ARROW_THICKNESS, 0);\n            }\n        }\n        return route;\n    }\n\n    /**\n     * Compute a bounding box (with margin) for the given list of points.\n     * \n     * @param points The points for which to compute the bounding box.\n     * @param margin The margin to expand around the min/max coordinates.\n     * @returns The bounding box with left, top, width, and height properties.\n     */\n    function computeBoundingBox(points: Vector2D[], margin: number): Rectangle {\n        const xs = points.map((p) => p.x);\n        const ys = points.map((p) => p.y);\n        const minX = Math.min(...xs);\n        const minY = Math.min(...ys);\n        const maxX = Math.max(...xs);\n        const maxY = Math.max(...ys);\n        return new Rectangle(\n            new Vector2D(minX - margin, minY - margin),\n            new Vector2D((maxX - minX) + 2 * margin, (maxY - minY) + 2 * margin)\n        );\n    }\n\n    /**\n     * Remove consecutive duplicate points from an array of points.\n     * \n     * @param points The array of points.\n     * @returns A new array with duplicates removed.\n     */\n    function removeDuplicatePoints(points: Vector2D[]): Vector2D[] {\n        if (!points.length) return points;\n        const newPoints: Vector2D[] = [points[0]];\n        for (let i = 1; i < points.length; i++) {\n            const last = newPoints[newPoints.length - 1];\n            if (points[i].x !== last.x || points[i].y !== last.y) {\n                newPoints.push(points[i]);\n            }\n        }\n        return newPoints;\n    }\n\n    /**\n     * Create a rounded SVG path definition string from an array of points.\n     * Each corner is rounded using a fixed radius, clamped by the length of the segments.\n     * \n     * @param points The array of points (in local SVG coordinates).\n     * @param radius The desired corner radius.\n     * @returns A string usable as the 'd' attribute of an SVG path.\n     */\n    function createRoundedPath(points: Vector2D[], radius: number): string {\n        // Remove consecutive duplicate points.\n        points = removeDuplicatePoints(points);\n\n        if (points.length === 0) return '';\n        if (points.length === 1) return `M ${points[0].x},${points[0].y}`;\n        if (points.length === 2) {\n            return `M ${points[0].x},${points[0].y} L ${points[1].x},${points[1].y}`;\n        }\n\n        let d = `M ${points[0].x},${points[0].y}`;\n        let prevPoint = points[0];\n\n        // This interface helps hold corner rounding information.\n        interface Arc {\n            arc: boolean;\n            center: Vector2D;\n            from: Vector2D;\n            to: Vector2D;\n            r: number;\n            u1: Vector2D;\n            u2: Vector2D;\n            theta: number;\n        }\n\n        const roundedPoints: (Vector2D | Arc)[] = [points[0]];\n\n        // Build a set of points & arcs that represent the path with rounded corners.\n        for (let i = 1; i < points.length - 1; i++) {\n            const current = points[i];\n            const next = points[i + 1];\n\n            // Vectors for incoming and outgoing segments.\n            const v1 = current.sub(prevPoint);\n            const v2 = next.sub(current);\n\n            // If segments are collinear, no rounding is needed.\n            if ((v1.x === 0 && v2.x === 0) || (v1.y === 0 && v2.y === 0)) {\n                roundedPoints.push(current);\n                prevPoint = current;\n                continue;\n            }\n\n            // Normalize the directions.\n            const u1 = v1.normalize();\n            const u2 = v2.normalize();\n\n            // Dot product to find angle at the corner.\n            const inDir = u1.negate(); // direction coming into the corner\n            const dot = inDir.dot(u2);\n            const clampedDot = Math.min(1, Math.max(-1, dot));\n            const theta = Math.acos(clampedDot);\n            if (theta === 0) {\n                roundedPoints.push(current);\n                prevPoint = current;\n                continue;\n            }\n\n            // Ideal offset along each segment to produce the desired radius.\n            const d_required = radius / Math.tan(theta / 2);\n            // Clamp the offset to the available segment lengths.\n            const len1 = Math.sqrt(v1.lenSqr());\n            const len2 = Math.sqrt(v2.lenSqr());\n            const d_eff = Math.min(d_required, len1, len2);\n            const r_eff = d_eff * Math.tan(theta / 2);\n\n            // Compute the tangent points around this corner.\n            const pEntry = current.sub(u1.mul(d_eff));\n            const pExit = current.add(u2.mul(d_eff));\n\n            // Push the entry tangent, the arc info, and the exit tangent.\n            roundedPoints.push(pEntry);\n            roundedPoints.push({\n                arc: true,\n                center: current,\n                from: pEntry,\n                to: pExit,\n                r: r_eff,\n                u1,\n                u2,\n                theta\n            } as Arc);\n            roundedPoints.push(pExit);\n\n            prevPoint = pExit;\n        }\n\n        // Add the last point.\n        roundedPoints.push(points[points.length - 1]);\n\n        // Now construct the SVG path string from our line/arc descriptors.\n        const firstPoint = roundedPoints[0] as Vector2D;\n        d = `M ${firstPoint.x},${firstPoint.y}`;\n        for (let i = 1; i < roundedPoints.length; i++) {\n            const ptOrArc = roundedPoints[i];\n\n            // If we encounter an Arc placeholder, skip it here\u2014draw arcs in a combined step below.\n            if ((ptOrArc as Arc).arc) {\n                continue;\n            }\n\n            const pt = ptOrArc as Vector2D;\n\n            // If the next chunk is an arc, then line up to the arc start and build the arc command.\n            if (i < roundedPoints.length - 1 && (roundedPoints[i + 1] as Arc).arc) {\n                d += ` L ${pt.x},${pt.y}`;\n                const arcInfo = roundedPoints[i + 1] as Arc;\n                // Cross product sign determines arc direction.\n                const cross = arcInfo.u1.x * arcInfo.u2.y - arcInfo.u1.y * arcInfo.u2.x;\n                const sweepFlag = cross < 0 ? 0 : 1;\n                d += ` A ${arcInfo.r},${arcInfo.r} 0 0,${sweepFlag} ${arcInfo.to.x},${arcInfo.to.y}`;\n                i += 2; // Skip the arc placeholders.\n            }\n            else {\n                d += ` L ${pt.x},${pt.y}`;\n            }\n        }\n        return d;\n    }\n\n    return {\n        /**\n         * Create a new arrow. The arrow is represented as an SVG element \n         * that is absolutely positioned within the parent, containing a \n         * path with a custom marker to render the arrowhead.\n         * \n         * @param parent The parent HTMLElement in which the arrow is drawn.\n         * @param start The start endpoint (HTMLElement or Point-like object).\n         * @param end The end endpoint (HTMLElement or Point-like object).\n         * @param options Additional configuration options.\n         * @returns An ArrowHandler object with methods to manage the arrow.\n         */\n        createArrow: function (\n            parent: HTMLElement,\n            start: Vector2D | Rectangle,\n            end: Vector2D | Rectangle,\n            options: ArrowOptions = {}\n        ): ArrowHandler {\n            options = options || {};\n            const gridSize = options.gridSize || DEFAULT_GRID_SIZE;\n            const margin = DEFAULT_MARGIN;\n            arrowCounter++;\n\n            // The XML namespace for SVG\n            const svgNS = 'http://www.w3.org/2000/svg';\n\n            // Resolve endpoints (convert from HTML elements or raw points to normalized Points).\n            let S = resolveEndpoint(start, 'start');\n            let E = resolveEndpoint(end, 'end');\n\n            // Check for \"invalid\" conditions: if one endpoint lies inside the other's element.\n            let invalid = false;\n            if (start instanceof Rectangle) {\n                if (start.contains(E)) {\n                    invalid = true;\n                }\n            }\n            if (end instanceof Rectangle) {\n                if (end.contains(S)) {\n                    invalid = true;\n                }\n            }\n\n            // Compute the route the arrow will take. \n            // If none is possible, we'll mark the arrow invalid and hide it.\n            const routePoints = computeRoute(S, E, gridSize, start, end);\n            if (!routePoints) {\n                invalid = true;\n            }\n\n            // Calculate a bounding box around the route (plus margin).\n            const bbox = computeBoundingBox(routePoints || [S, E], margin);\n\n            // Create the SVG container for this arrow, absolutely positioned in the parent.\n            const svg = document.createElementNS(svgNS, 'svg');\n            svg.style.position = 'absolute';\n            svg.style.left = bbox.left + 'px';\n            svg.style.top = bbox.top + 'px';\n            svg.style.width = bbox.width + 'px';\n            svg.style.height = bbox.height + 'px';\n            svg.style.overflow = 'visible';\n            svg.style.pointerEvents = 'none';\n            svg.dataset.role = 'dependency-arrow';\n            parent.appendChild(svg);\n\n            // Set the data-id attribute if provided.\n            if (options.dataId) {\n                svg.dataset.id = options.dataId;\n            }\n\n            // Create a unique marker element (arrowhead) for this arrow instance.\n            const markerId = 'arrowhead-' + arrowCounter;\n            const defs = document.createElementNS(svgNS, 'defs');\n            const marker = document.createElementNS(svgNS, 'marker');\n            marker.setAttribute('id', markerId);\n            marker.setAttribute('markerWidth', '6');\n            marker.setAttribute('markerHeight', '6');\n            marker.setAttribute('refX', '5');\n            marker.setAttribute('refY', '3');\n            marker.setAttribute('orient', 'auto');\n            marker.setAttribute('viewBox', '0 0 6 6');\n            const markerPath = document.createElementNS(svgNS, 'path');\n            markerPath.setAttribute('d', 'M0,0 L6,3 L0,6 L1.5,3 z');\n            markerPath.setAttribute('fill', options.color || 'white');\n            markerPath.style.pointerEvents = 'visiblePainted'; \n            marker.appendChild(markerPath);\n            defs.appendChild(marker);\n            svg.appendChild(defs);\n\n            // Convert the route points from global parent coords to the local SVG coordinate system.\n            let localPoints: Vector2D[];\n            if (routePoints) {\n                localPoints = routePoints.map(p => p.sub(bbox.position));\n            } else {\n                localPoints = [\n                    S.sub(bbox.position),\n                    E.sub(bbox.position)\n                ];\n            }\n\n            // Construct the path string with rounded corners.\n            const d = createRoundedPath(localPoints, FIXED_RADIUS);\n            const path = document.createElementNS(svgNS, 'path');\n            path.setAttribute('d', d);\n            path.setAttribute('fill', 'none');\n            path.setAttribute('stroke', options.color || 'white');\n            path.setAttribute('stroke-width', ARROW_THICKNESS.toString());\n            path.setAttribute('marker-end', `url(#${markerId})`);\n            path.style.pointerEvents = 'visiblePainted';\n\n            // If the arrow was invalid, hide it initially.\n            if (invalid) {\n                path.style.display = 'none';\n            }\n\n            svg.appendChild(path);\n\n            // Return an object that lets consumers manage this arrow.\n            const handler: ArrowHandler = {\n                svg: svg,\n\n                /**\n                 * Update the arrow to new start and end coordinates or elements. \n                 * This re-routes and repositions the arrow, possibly hiding it \n                 * if it becomes invalid (e.g. an endpoint falls within the other's element).\n                 * \n                 * @param newStart The new start point or HTML element.\n                 * @param newEnd The new end point or HTML element.\n                 */\n                update: function (newStart: Vector2D | Rectangle, newEnd: Vector2D | Rectangle) {\n                    const S_new = resolveEndpoint(newStart, 'start');\n                    const E_new = resolveEndpoint(newEnd, 'end');\n\n                    let nowInvalid = false;\n                    if (newStart instanceof Rectangle) {\n                        if (newStart.contains(E_new)) {\n                            nowInvalid = true;\n                        }\n                    }\n                    if (newEnd instanceof Rectangle) {\n                        if (newEnd.contains(S_new)) {\n                            nowInvalid = true;\n                        }\n                    }\n\n                    const newRoute = computeRoute(\n                        S_new,\n                        E_new,\n                        gridSize,\n                        newStart,\n                        newEnd\n                    );\n                    if (!newRoute) nowInvalid = true;\n\n                    // Recompute the bounding box for the new route.\n                    const newBbox = computeBoundingBox(newRoute || [S_new, E_new], margin);\n                    svg.style.left = newBbox.left + 'px';\n                    svg.style.top = newBbox.top + 'px';\n                    svg.style.width = newBbox.width + 'px';\n                    svg.style.height = newBbox.height + 'px';\n\n                    // Adjust the path coordinates to the new local origin (the top-left of newBbox).\n                    const newLocalPoints = newRoute\n                        ? newRoute.map(p => p.sub(newBbox.position))\n                        : [\n                            S_new.sub(newBbox.position),\n                            E_new.sub(newBbox.position),\n                        ];\n\n                    // Rebuild the path data and toggle visibility based on validity.\n                    const newD = createRoundedPath(newLocalPoints, FIXED_RADIUS);\n                    path.setAttribute('d', newD);\n                    path.style.display = nowInvalid ? 'none' : 'block';\n                },\n\n                /**\n                 * Remove the arrow's SVG from the DOM.\n                 */\n                remove: function () {\n                    if (svg.parentNode) {\n                        svg.parentNode.removeChild(svg);\n                    }\n                },\n\n                /**\n                 * Attach an event listener to the arrow's path element.\n                 * For example, `arrow.addEventListener('click', (evt) => ...)`.\n                 * \n                 * @param type The event type (e.g., 'click').\n                 * @param listener The listener callback.\n                 * @param options Optional event listener options.\n                 */\n                addEventListener: function (\n                    type: string,\n                    listener: EventListenerOrEventListenerObject,\n                    options?: boolean | AddEventListenerOptions\n                ) {\n                    path.addEventListener(type, listener, options);\n                },\n\n                /**\n                 * Update the arrow's stroke and arrowhead color.\n                 * \n                 * @param newColor The new color for the arrow stroke and tip.\n                 */\n                setColor: function (newColor: string) {\n                    path.setAttribute('stroke', newColor);\n                    markerPath.setAttribute('fill', newColor);\n                },\n            };\n\n            // Return the arrow handler to the caller.\n            return handler;\n        },\n    };\n})();\n", "export class ModalDialog {\n    private readonly onClose?: () => void;\n\n    public static makeHtmlElement() : HTMLElement {\n        const dialog = document.createElement(\"div\");\n        dialog.className = \"modal-dialog\";\n        dialog.style.display = \"none\";\n\n        const dialogContent = document.createElement(\"div\");\n        dialogContent.className = \"modal-content\";\n        dialog.appendChild(dialogContent);\n\n        const dialogHeader = document.createElement(\"div\");\n        dialogHeader.className = \"modal-header\";\n        dialogContent.appendChild(dialogHeader);\n\n        const dialogTitle = document.createElement(\"div\");\n        dialogTitle.className = \"modal-title\";\n        dialogHeader.appendChild(dialogTitle);\n\n        const dialogClose = document.createElement(\"div\");\n        dialogClose.className = \"modal-close\";\n        dialogClose.innerHTML = \"&times;\";\n        dialogHeader.appendChild(dialogClose);\n\n        const dialogBody = document.createElement(\"div\");\n        dialogBody.className = \"modal-body\";\n        dialogContent.appendChild(dialogBody);\n\n        const dialogFooter = document.createElement(\"div\");\n        dialogFooter.className = \"modal-footer\";\n        dialogContent.appendChild(dialogFooter);\n\n        return dialog;\n    }\n\n    constructor(\n        private element: HTMLElement,\n        options?: {\n            title?: string;\n            message?: string;\n            options?: [string, string][];\n            allowClose?: boolean;\n            onClose?: () => void;\n            onSelection?: (button: string) => void;\n        }\n    ) {\n        this.onClose = options?.onClose;\n\n        const title = this.element.querySelector(\".modal-title\") as HTMLElement;\n        title.textContent = options?.title || \"\";\n        if (!options?.title) title.style.display = \"none\";\n        else title.style.removeProperty(\"display\");\n\n        const body = this.element.querySelector(\".modal-body\") as HTMLElement;\n        body.innerHTML = options?.message || \"\";\n        if (!options?.message) body.style.display = \"none\";\n        else body.style.removeProperty(\"display\");\n\n        const footer = this.element.querySelector(\".modal-footer\") as HTMLElement;\n        footer.innerHTML = \"\";\n        const buttons = options?.options || [];\n        for (const [key, label] of buttons) {\n            const button = document.createElement(\"div\");\n            button.className = \"modal-button\";\n            button.textContent = label;\n            button.onclick = () => {\n                try {\n                    if (options?.onSelection) {\n                        options.onSelection(key);\n                    }\n                }\n                finally {\n                    this.close();\n                }\n            };\n            footer.appendChild(button);\n        }\n        if (buttons.length === 0) footer.style.display = \"none\";\n        else footer.style.removeProperty(\"display\");\n\n        const close = this.element.querySelector(\".modal-close\") as HTMLElement;\n        close.onclick = () => this.close();\n        if (options?.allowClose) close.style.removeProperty(\"display\");\n        else close.style.display = \"none\";\n    }\n\n    show() { this.element.style.removeProperty(\"display\"); }\n    hide() { this.element.style.display = \"none\"; }\n\n    private close() {\n        this.hide();\n        if (this.onClose) {\n            this.onClose();\n        }\n    }\n}", "import { ArrowHandler, DependencyArrow } from './DependencyArrow';\nimport { CustomPanZoom } from './CustomPanZoom';\nimport { IControllerPresenter, Arrow, TaskComponent } from '../Interfaces/IPresenter';\nimport { ITask } from '../Interfaces/ITask';\nimport { IDependency } from '../Interfaces/IDependency';\nimport { CanvasCoords, CanvasRect, ScreenCoords, ScreenRect, SizeOnScreen } from './CoordinateSystem';\nimport { Rectangle, Vector2D } from '../Abstract/Math';\nimport { ModalDialog } from './ModalDialog';\n\ndeclare var Quill: any;\n\n/**\n * DOMController manages the canvas, task elements, dependency arrows, and related UI elements.\n * It provides methods to manipulate tasks on the canvas including adding, moving, editing,\n * and drawing selection boxes and context menus.\n */\nexport class AppPresenter implements IControllerPresenter {\n  private orderedTasks: { id: string; element: HTMLElement; position: { x: number; y: number } }[] = [];\n  private canvas: HTMLElement | null = null;\n  private selectionBoxElement: HTMLElement | null = null;\n  private contextMenuElement: HTMLElement | null = null;\n  private modalScreen: HTMLElement;\n  private modalDialogElement: HTMLElement;\n\n  // Mapping from task ID to its ITask and DOM element.\n  private taskMap: Map<string, { task: ITask; element: HTMLElement }> = new Map();\n\n  // Mapping from dependency key to its wrapped arrow.\n  private dependencyMap: Map<string, ArrowWrapper> = new Map();\n\n  constructor() {\n    // Get the canvas element.\n    this.canvas = document.getElementById('canvas') as HTMLElement;\n    CustomPanZoom.init(this.canvas);\n    // Attempt to find an existing context menu element.\n    this.contextMenuElement = document.getElementById('contextMenu');\n    if (!this.contextMenuElement) {\n      // Create a new context menu if not found.\n      this.contextMenuElement = document.createElement('div');\n      this.contextMenuElement.id = 'contextMenu';\n      this.contextMenuElement.style.position = 'absolute';\n      this.contextMenuElement.style.display = 'none';\n      document.body.appendChild(this.contextMenuElement);\n    }\n\n    // Add modal screen to DOM\n    const modalScreen = document.createElement('div');\n    modalScreen.id = 'modalScreen';\n    modalScreen.style.position = 'fixed';\n    modalScreen.style.inset = '0';\n    modalScreen.style.backgroundColor = 'rgba(0,0,0,0.5)';\n    modalScreen.style.display = 'none';\n    modalScreen.style.zIndex = '1000';\n    document.body.appendChild(modalScreen);\n\n    // Add modal dialog to DOM\n    this.modalDialogElement = ModalDialog.makeHtmlElement();\n    this.modalDialogElement.style.zIndex = '1001';\n    document.body.appendChild(this.modalDialogElement);\n\n    this.modalScreen = modalScreen;\n  }\n\n  //\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  // IPresenter methods (using ITask where appropriate)\n  //\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n  pauseCanvas(): void {\n    this.modalScreen.style.display = 'block';\n  }\n\n  unpauseCanvas(): void {\n    this.modalScreen.style.display = 'none';    \n  }\n\n  showModal(title: string, message: string, options: [string, string][]): Promise<string> {\n    return new Promise((resolve) => {\n      const dialog = new ModalDialog(this.modalDialogElement, {\n        title,\n        message,\n        options,\n        allowClose: false,\n        onSelection: button => {\n          resolve(button);\n        }\n      });\n      dialog.show();\n    });\n  }\n\n  panCanvas(delta: SizeOnScreen): void {\n    CustomPanZoom.panBy(delta.vec);\n  }\n\n  getTaskPositionOnCanvas(task: ITask): CanvasCoords {\n    const elem = this.getTaskElement(task);\n    if (!elem) throw new Error(\"Task element not found\");\n    return CanvasCoords.new(elem.offsetLeft, elem.offsetTop);\n  }\n\n  toggleTaskHighlight(task: ITask, highlight: boolean): void {\n    const elem = this.getTaskElement(task);\n    if (!elem) return;\n    if (highlight) {\n      elem.classList.add('selected');\n    } else {\n      elem.classList.remove('selected');\n    }\n  }\n\n  toggleAllTaskHighlights(highlight: boolean): void {\n    const taskElements = this.canvas?.querySelectorAll('.task') as NodeListOf<HTMLElement>;\n    taskElements.forEach((taskEl) => {\n      if (highlight) {\n        taskEl.classList.add('selected');\n      }\n      else {\n        taskEl.classList.remove('selected');\n      }\n    });\n  }\n\n  showSelectionBox(): void {\n    if (!this.canvas) throw new Error(\"Canvas not initialized\");\n    if (!this.selectionBoxElement) {\n      this.selectionBoxElement = document.createElement('div');\n      this.selectionBoxElement.style.position = 'absolute';\n      this.selectionBoxElement.style.border = '1px dashed lightblue';\n      this.selectionBoxElement.style.backgroundColor = 'rgba(173,216,230,0.2)';\n      this.selectionBoxElement.style.pointerEvents = 'none';\n      this.canvas.appendChild(this.selectionBoxElement);\n    }\n  }\n\n  moveSelectionBox(start: ScreenCoords, end: ScreenCoords): void {\n    if (!this.selectionBoxElement) return;\n    // Determine the top-left corner of the selection box.\n    let x = Math.min(start.x, end.x);\n    let y = Math.min(start.y, end.y);\n    // Get current scale and translation from the pan/zoom module.\n    const scale = CustomPanZoom.getScale();\n    const translation = CustomPanZoom.getTranslation();\n    // Adjust coordinates for canvas translation and scale.\n    x = (x - translation.x) / scale;\n    y = (y - translation.y) / scale;\n    // Calculate the width and height of the selection box.\n    let width = Math.abs(start.x - end.x) / scale;\n    let height = Math.abs(start.y - end.y) / scale;\n    // Update the selection box element's position and dimensions.\n    this.selectionBoxElement.style.left = x + 'px';\n    this.selectionBoxElement.style.top = y + 'px';\n    this.selectionBoxElement.style.width = width + 'px';\n    this.selectionBoxElement.style.height = height + 'px';\n  }\n\n  hideSelectionBox(): void {\n    if (this.selectionBoxElement) {\n      this.selectionBoxElement.remove();\n      this.selectionBoxElement = null;\n    }\n  }\n\n  getAllTasks(): ITask[] {\n    return Array.from(this.taskMap.values()).map((mapping) => mapping.task);\n  }\n\n  getTasksInArea(start: ScreenCoords, end: ScreenCoords): ITask[] {\n    if (!this.canvas) throw new Error(\"Canvas not initialized\");\n    const selectionRect = ScreenRect.fromPoints(start, end);\n    const tasksInArea: ITask[] = [];\n    const taskElements = this.canvas.querySelectorAll('.task') as NodeListOf<HTMLElement>;\n    taskElements.forEach((taskEl) => {\n      const taskRect = ScreenRect.fromElementBounds(taskEl);\n      if (selectionRect.intersects(taskRect)) {\n        const id = taskEl.getAttribute('data-id');\n        if (id && this.taskMap.has(id)) {\n          tasksInArea.push(this.taskMap.get(id)!.task);\n        }\n      }\n    });\n    return tasksInArea;\n  }\n\n  showContextMenu(position: ScreenCoords, options: [string, string][]): void {\n    const contextMenuElement = this.contextMenuElement;\n    if (!contextMenuElement) {\n      throw new Error(\"Not initialized\");\n    }\n    // Clear any existing menu items.\n    contextMenuElement.innerHTML = '';\n    options.forEach((opt) => {\n      const item = document.createElement('div');\n      item.textContent = opt[1];\n      item.setAttribute('data-role', 'context-menu-item');\n      item.setAttribute('data-key', opt[0]);\n      contextMenuElement.appendChild(item);\n    });\n    contextMenuElement.style.left = position.x + 'px';\n    contextMenuElement.style.top = position.y + 'px';\n    contextMenuElement.style.display = 'block';\n  }\n\n  hideContextMenu(): void {\n    if (this.contextMenuElement) {\n      this.contextMenuElement.style.display = 'none';\n    }\n  }\n\n  addTaskToCanvas(task: ITask): void {\n    if (!this.canvas) throw new Error(\"Canvas not initialized\");\n    const eTask = document.createElement('div');\n    eTask.classList.add('task');\n    eTask.setAttribute('data-id', task.getId());\n    const pos = task.getPosition();\n    if (pos) {\n      eTask.style.left = pos.x + 'px';\n      eTask.style.top = pos.y + 'px';\n      eTask.setAttribute('data-snapped', (pos.x % 40 === 0 && pos.y % 40 === 0) ? 'true' : 'false');\n    }\n\n    // Create header container for task controls.\n    const header = document.createElement('div');\n    header.classList.add('task-header');\n\n    // Create toggle element to collapse/expand the task.\n    const toggle = document.createElement('div');\n    toggle.classList.add('toggle');\n    toggle.setAttribute('data-role', 'toggle');\n    toggle.textContent = task.isExpanded() ? '\u25BC' : '\u25BA';\n    header.appendChild(toggle);\n\n    // Create title element.\n    const title = document.createElement('div');\n    title.classList.add('title');\n    title.setAttribute('data-role', 'title');\n    title.textContent = task.getTitle();\n    header.appendChild(title);\n\n    // Create custom checkbox element.\n    const checkbox = document.createElement('div');\n    checkbox.classList.add('custom-checkbox');\n    checkbox.setAttribute('data-role', 'checkbox');\n\n    // Create checkbox fill element for completion state.\n    const checkboxFill = document.createElement('div');\n    checkboxFill.classList.add('checkbox-fill');\n    checkboxFill.innerHTML = `\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" style=\"background: transparent;\">\n  <rect x=\"1\" y=\"1\" width=\"26\" height=\"26\" rx=\"3.75\" ry=\"3.75\" fill=\"none\" stroke=\"#4d4d4d\" stroke-width=\"2\"></rect>\n  <defs>\n    <mask id=\"checkMask-${task.getId()}\">\n      <rect x=\"0\" y=\"0\" width=\"28\" height=\"28\" fill=\"white\"></rect>\n      <polyline points=\"8,15 12,19 20,9\" stroke=\"black\" stroke-width=\"2\" stroke-linecap=\"round\" fill=\"none\" stroke-linejoin=\"round\"></polyline>\n    </mask>\n  </defs>\n  <rect x=\"4\" y=\"4\" width=\"20\" height=\"20\" rx=\"1.9\" ry=\"1.9\" fill=\"#25a599\" fill-opacity=\"${task.isComplete() ? '1' : '0.1'}\" mask=\"url(#checkMask-${task.getId()})\"></rect>\n</svg>`;\n    checkbox.appendChild(checkboxFill);\n    header.appendChild(checkbox);\n\n    eTask.appendChild(header);\n\n    // Create task body container.\n    const taskBody = document.createElement('div');\n    taskBody.classList.add('task-body');\n    eTask.appendChild(taskBody);\n\n    // Create description element.\n    const description = document.createElement('div');\n    description.classList.add('description');\n    description.setAttribute('data-role', 'description');\n    description.innerHTML = task.getDescription();\n    taskBody.appendChild(description);\n\n    // Add the new task to the canvas in the correct z-order.\n    if (pos) {\n      this.adjustTaskZPositionInternal(eTask, pos);\n    }\n\n    // Store the mapping between task and its element.\n    this.taskMap.set(task.getId(), { task, element: eTask });\n  }\n\n  moveTask(task: ITask, position: CanvasCoords, autoAdjustZPosition: boolean = true): void {\n    const mapping = this.taskMap.get(task.getId());\n    if (!mapping) return;\n    const elem = mapping.element;\n    elem.style.left = position.x + 'px';\n    elem.style.top = position.y + 'px';\n    if (autoAdjustZPosition) {\n      this.adjustTaskZPositionInternal(elem, position);\n    }\n  }\n\n  adjustTaskZPosition(task: ITask, position: CanvasCoords): void {\n    const mapping = this.taskMap.get(task.getId());\n    if (!mapping) return;\n    this.adjustTaskZPositionInternal(mapping.element, position);\n  }\n\n  // Internal method: same as before but works with an HTMLElement.\n  private adjustTaskZPositionInternal(taskElement: HTMLElement, position: { x: number; y: number }): void {\n    let taskItem = this.orderedTasks.find((t) => t.element === taskElement);\n    if (taskItem) {\n      taskItem.position = position;\n      this.orderedTasks = this.orderedTasks.filter((t) => t.element !== taskElement);\n    } else {\n      taskItem = {\n        id: taskElement.getAttribute('data-id') || '',\n        element: taskElement,\n        position: position,\n      };\n    }\n    let newIndex = this.orderedTasks.findIndex((t) => {\n      return position.y > t.position.y || (position.y === t.position.y && position.x > t.position.x);\n    });\n    if (newIndex === -1) newIndex = this.orderedTasks.length;\n    this.orderedTasks.splice(newIndex, 0, taskItem);\n    if (!this.canvas) throw new Error(\"Canvas not initialized\");\n    if (newIndex === this.orderedTasks.length - 1) {\n      this.canvas.appendChild(taskElement);\n    } else {\n      this.canvas.insertBefore(taskElement, this.orderedTasks[newIndex + 1].element);\n    }\n  }\n\n  toggleEditModeForTaskTitle(task: ITask, enable: boolean): void {\n    const mapping = this.taskMap.get(task.getId());\n    if (!mapping) return;\n    const taskElem = mapping.element;\n    const titleEl = taskElem.querySelector('[data-role=\"title\"]') as HTMLElement;\n    let titleInput = titleEl instanceof HTMLInputElement ? titleEl : null;\n    if (enable) {\n      if (!titleInput) {\n        titleInput = document.createElement('input');\n        titleInput.dataset.role = 'title';\n        titleInput.type = 'text';\n        titleInput.value = titleEl.textContent || '';\n        titleInput.style.width = '100%';\n        titleEl.replaceWith(titleInput);\n        titleInput.focus();\n      }\n    }\n    else {\n      if (titleInput) {\n        const newTitleEl = document.createElement('div');\n        newTitleEl.dataset.role = 'title';\n        newTitleEl.classList.add('title');\n        newTitleEl.textContent = titleInput.value;\n        titleInput.replaceWith(newTitleEl);\n      }\n    }\n  }\n\n  getTaskTitle(task: ITask): string {\n    const mapping = this.taskMap.get(task.getId());\n    if (!mapping) return '';\n    const taskElem = mapping.element;\n    const titleEl = taskElem.querySelector('[data-role=\"title\"]') as HTMLElement;\n    const titleInput = titleEl instanceof HTMLInputElement ? titleEl : null;\n    return titleInput ? titleInput.value : titleEl.textContent || '';\n  }\n\n  setTaskTitle(task: ITask, title: string): void {\n    const mapping = this.taskMap.get(task.getId());\n    if (!mapping) return;\n    const taskElem = mapping.element;\n    const titleEl = taskElem.querySelector('[data-role=\"title\"]') as HTMLElement;\n    const titleInput = titleEl instanceof HTMLInputElement ? titleEl : null;\n    if (titleInput) {\n      titleInput.value = title;\n    }\n    else {\n      titleEl.textContent = title;\n    }\n  }\n\n  toggleEditModeForTaskDescription(task: ITask, enable: boolean): void {\n    const mapping = this.taskMap.get(task.getId());\n    if (!mapping) return;\n    const taskElem = mapping.element;\n    // Try to find either a normal description or an editor container if we're already editing.\n    let descEl = taskElem.querySelector('[data-role=\"description\"], .editor-container') as HTMLElement;\n    if (enable) {\n      // If already in edit mode, do nothing.\n      if (descEl && descEl.classList.contains('editor-container')) {\n        return;\n      }\n      // Save current HTML content.\n      const oldValue = descEl ? descEl.innerHTML : '';\n      // Create the container for our Quill editor.\n      const editorContainer = document.createElement('div');\n      editorContainer.classList.add('editor-container');\n      editorContainer.style.minHeight = '50px';\n      // Create an inner element where Quill will attach.\n      const editorElement = document.createElement('div');\n      editorContainer.appendChild(editorElement);\n      // Replace the original description element with the editor container.\n      if (descEl && descEl.parentNode) {\n        descEl.parentNode.replaceChild(editorContainer, descEl);\n      }\n      // Initialize Quill.\n      const quill = new Quill(editorElement, {\n        theme: 'snow',\n        modules: {\n          toolbar: [\n            ['bold', 'italic', 'underline', 'strike'],\n            [{ header: 1 }, { header: 2 }],\n            [{ list: 'ordered' }, { list: 'bullet' }],\n            [{ indent: '-1' }, { indent: '+1' }],\n            [{ color: [] }, { background: [] }],\n            [{ align: [] }],\n            ['clean']\n          ]\n        }\n      });\n      // Set the editor's content and focus.\n      quill.root.innerHTML = oldValue;\n      quill.focus();\n      setTimeout(() => quill.setSelection(quill.getLength(), 0), 0);\n      // Adjust the height as text changes.\n      const adjustHeight = () => {\n        const newHeight = quill.root.scrollHeight;\n        editorElement.style.height = newHeight + 'px';\n      };\n      quill.on('text-change', adjustHeight);\n      adjustHeight();\n      // Save the Quill instance on the container for later retrieval.\n      (editorContainer as any)._quill = quill;\n    } else {\n      // If we're not in edit mode (i.e. not using the editor container), nothing to do.\n      if (!descEl || !descEl.classList.contains('editor-container')) {\n        return;\n      }\n      // Get the Quill instance.\n      const quill = (descEl as any)._quill;\n      if (!quill) return;\n      // Grab the updated HTML.\n      const newValue = quill.root.innerHTML;\n      // Create a new description element.\n      const newDescEl = document.createElement('div');\n      newDescEl.classList.add('description');\n      newDescEl.setAttribute('data-role', 'description');\n      newDescEl.innerHTML = newValue;\n      // Replace the editor container with the new description element.\n      descEl.parentNode?.replaceChild(newDescEl, descEl);\n    }\n  }\n\n  getTaskDescription(task: ITask): string | null {\n    const mapping = this.taskMap.get(task.getId());\n    if (!mapping) return null;\n    const taskElem = mapping.element;\n    const descEl = taskElem.querySelector('[data-role=\"description\"], .editor-container') as HTMLElement;\n    if (!descEl) return null;\n    if (descEl.classList.contains('editor-container')) {\n      const quill = (descEl as any)._quill;\n      return quill ? quill.root.innerHTML : null;\n    } else {\n      return descEl.innerHTML;\n    }\n  }\n\n  setTaskDescription(task: ITask, description: string): void {\n    const mapping = this.taskMap.get(task.getId());\n    if (!mapping) return;\n    const taskElem = mapping.element;\n    // Look for either a plain description or an editor container if in edit mode.\n    const descEl = taskElem.querySelector('[data-role=\"description\"], .editor-container') as HTMLElement;\n    if (!descEl) return;\n    if (descEl.classList.contains('editor-container')) {\n      // If editing, update the Quill editor's content.\n      const quill = (descEl as any)._quill;\n      if (quill) {\n        quill.root.innerHTML = description;\n      }\n    } else {\n      // If not editing, simply update the innerHTML.\n      descEl.innerHTML = description;\n    }\n  }\n\n  toggleTaskCompletion(task: ITask, completed: boolean): void {\n    const taskElem = this.getTaskElement(task);\n    if (!taskElem) throw new Error(\"Task element not found\");\n\n    const checkboxFill = taskElem.querySelector('.checkbox-fill') as HTMLElement;\n    if (checkboxFill) {\n      const innerRect = checkboxFill.querySelector('rect[mask]') as SVGRectElement;\n      if (innerRect) {\n        innerRect.setAttribute('fill-opacity', completed ? '1' : '0.1');\n      }\n    }\n  }\n\n  toggleTaskExpansion(task: ITask, collapsed: boolean): void {\n    const taskElem = this.getTaskElement(task);\n    if (!taskElem) throw new Error(\"Task element not found\");\n\n    const taskBody = taskElem.querySelector('.task-body') as HTMLElement;\n    if (taskBody) {\n      taskBody.style.display = collapsed ? 'none' : 'block';\n    }\n    const toggleElem = taskElem.querySelector('.toggle') as HTMLElement;\n    if (toggleElem) {\n      toggleElem.textContent = collapsed ? '\u25BA' : '\u25BC';\n    }\n  }\n\n  removeTask(task: ITask): void {\n    if (!this.canvas) throw new Error(\"Canvas not initialized\");\n\n    // Remove from task map and DOM.\n    const mapping = this.taskMap.get(task.getId());\n    if (mapping) {\n      mapping.element.remove();\n      this.taskMap.delete(task.getId());\n    }\n\n    // Remove from ordered tasks.\n    const index = this.orderedTasks.findIndex((t) => t.id === task.getId());\n    if (index !== -1) {\n      this.orderedTasks.splice(index, 1);\n    }\n\n  }\n\n  //\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  // Dependency / Arrow methods\n  //\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n  addDependency(dependency: IDependency): Arrow {\n    if (!this.canvas) throw new Error(\"Canvas not initialized\");\n    const requiredTask = dependency.getRequiredTask();\n    const requiredByTask = dependency.getRequiredByTask();\n    const key = this.dependencyKey(requiredTask.getId(), requiredByTask.getId());\n    const wrapper = new ArrowWrapper(this, requiredTask, requiredByTask, dependency, key, this.canvas);\n    this.dependencyMap.set(key, wrapper);\n    return wrapper;\n  }\n\n  removeDependency(dependency: IDependency): void {\n    const key = this.dependencyKey(dependency.getRequiredTask().getId(), dependency.getRequiredByTask().getId());\n    const wrapper = this.dependencyMap.get(key);\n    if (wrapper) {\n      wrapper.remove();\n      this.dependencyMap.delete(key);\n    }\n  }\n\n  createArrow(source: ITask | CanvasCoords, target: ITask | CanvasCoords): Arrow {\n    if (!this.canvas) throw new Error(\"Canvas not initialized\");\n    return new ArrowWrapper(this, source, target, null, null, this.canvas);\n  }\n\n  updateArrow(\n    arrow: Arrow,\n    options: {\n      source: ITask | CanvasCoords | undefined;\n      target: ITask | CanvasCoords | undefined;\n      isGhostArrow?: boolean;\n    } | undefined\n  ): void {\n    // Resolve the arrow wrapper.\n    if (!(arrow instanceof ArrowWrapper)) throw new Error(\"Invalid arrow\");\n    const wrapper = arrow as ArrowWrapper;\n\n    // Update Path\n    wrapper.update(options?.source || null, options?.target || null);\n\n    // Change color for ghost arrow validation.\n    if (options?.isGhostArrow) {\n      const updatedSource = options.source ? options.source : wrapper.getSource();\n      const updatedTarget = options.target ? options.target : wrapper.getTarget();    \n      const validColor = '#55b38888';\n      const invalidColor = '#b3555588';\n      const invalid = updatedSource instanceof CanvasCoords || updatedTarget instanceof CanvasCoords;\n      const color = invalid ? invalidColor : validColor;\n      wrapper.setColor(color);\n    }\n    else {\n      wrapper.setColor(ArrowWrapper.defaultColor);\n    }\n\n  }\n\n  removeArrow(arrow: Arrow): void {\n    (arrow as ArrowWrapper).remove();\n  }\n\n  //\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  // IControllerPresenter additional methods\n  //\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n  getTaskInfo(element: Element): { task: ITask; component: TaskComponent } | null {\n    // Determine which task element this belongs to.\n    const taskElem = this.getTaskElementFromChild(element);\n    if (!taskElem) return null;\n    const id = taskElem.getAttribute('data-id');\n    if (!id || !this.taskMap.has(id)) return null;\n    const task = this.taskMap.get(id)!.task;\n\n    // Determine the specific component type.\n    if (element.closest('[data-role=\"title\"]')) {\n      return { task, component: TaskComponent.Title };\n    } else if (element.closest('[data-role=\"description\"]')) {\n      return { task, component: TaskComponent.Description };\n    } else if (element.closest('[data-role=\"toggle\"]')) {\n      return { task, component: TaskComponent.Collapse };\n    } else if (element.closest('[data-role=\"checkbox\"]')) {\n      return { task, component: TaskComponent.Completion };\n    } else if (element.closest('.task-header')) {\n      return { task, component: TaskComponent.Header };\n    }\n    return { task, component: TaskComponent.Task };\n  }\n\n  getTask(element: Element): ITask | null {\n    const taskElem = this.getTaskElementFromChild(element);\n    if (!taskElem) return null;\n\n    const id = taskElem.getAttribute('data-id');\n    return id ? this.taskMap.get(id)!.task : null;\n  }\n\n  getDependency(element: Element): IDependency | null {\n    const arrowElement = element.closest('[data-role=\"dependency-arrow\"]');\n    if (!arrowElement) return null;\n\n    const dataId = arrowElement.getAttribute('data-id');\n    if (!dataId) return null;\n\n    const wrapper = this.dependencyMap.get(dataId);\n    return wrapper?.dependency || null;\n  }\n\n  getContextMenuOption(element: Element): string | null {\n    if (!element) return null;\n    const eContextMenuItems = element.closest('[data-role=\"context-menu-item\"]');\n    return eContextMenuItems ? eContextMenuItems.getAttribute('data-key') : null;\n  }\n\n  //\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  // Internal helper methods\n  //\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n  /**\n   * Retrieves the task element associated with a task.\n   * @param task The task to search for.\n   * @returns The task HTMLElement or null if not found.\n   */\n  getTaskElement(task: ITask): HTMLElement | null {\n    const mapping = this.taskMap.get(task.getId());\n    return mapping ? mapping.element : null;\n  }\n\n  //\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  // Private helper methods\n  //\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n  /**\n   * Finds the closest ancestor element with the 'task' class.\n   * @param element The child element to search from.\n   * @returns The task HTMLElement or null if not found.\n   */\n  private getTaskElementFromChild(element: Element): HTMLElement | null {\n    return element.closest('.task') as HTMLElement;\n  }\n\n  private dependencyKey(id1: string, id2: string): string {\n    return id1 + '->' + id2;\n  }\n\n}\n\n/**\n * ArrowWrapper wraps the DependencyArrow (which does not implement the new Arrow interface)\n * to provide an implementation of the Arrow interface.\n */\nclass ArrowWrapper implements Arrow {\n  public static readonly defaultColor: string = '#b3b3b3';\n\n  public readonly arrow: ArrowHandler;\n  private source: CanvasCoords | ArrowRect;\n  private target: CanvasCoords | ArrowRect;\n\n  constructor(\n    private presenter: AppPresenter,\n    source: ITask | CanvasCoords,\n    target: ITask | CanvasCoords,\n    public readonly dependency: IDependency | null,\n    dependencyKey: string | null,\n    canvas: HTMLElement\n  ) {\n    this.source = this.setSource(source);\n    this.target = this.setTarget(target);\n    \n    this.arrow = DependencyArrow.createArrow(\n      canvas,\n      this.getArrowSource(),\n      this.getArrowTarget(),\n      {\n        color: ArrowWrapper.defaultColor,\n        dataId: dependencyKey || undefined\n      }\n    );\n    canvas.prepend(this.arrow.svg)\n  }\n\n  getSource(): ITask | CanvasCoords {\n    return this.source instanceof CanvasCoords ? this.source : this.source.task;\n  }\n  private setSource(value: ITask | CanvasCoords): CanvasCoords | ArrowRect {\n    if (value instanceof CanvasCoords) {\n      this.source = value;\n    }\n    else {\n      const element = this.presenter.getTaskElement(value) || undefined;\n      if (!element) throw new Error(\"Invalid source\");\n      this.source = new ArrowRect(value, element);\n    }\n    return this.source;\n  }\n  private getArrowSource(): Vector2D | Rectangle {\n    if (this.source instanceof CanvasCoords) {\n      return this.source.vec;\n    }\n    else if (!this.source.element)\n      throw new Error(\"Invalid source\");\n    else {\n      return ScreenRect.fromElementBounds(this.source.element).toCanvasRect().rect;\n    }\n  }\n\n  getTarget(): ITask | CanvasCoords {\n    return this.target instanceof CanvasCoords ? this.target : this.target.task;\n  }\n  private setTarget(value: ITask | CanvasCoords): CanvasCoords | ArrowRect {\n    if (value instanceof CanvasCoords) {\n      this.target = value;\n    }\n    else {\n      const element = this.presenter.getTaskElement(value) || undefined;\n      if (!element) throw new Error(\"Invalid target\");\n      this.target = new ArrowRect(value, element);\n    }\n    return this.target;\n  }\n  private getArrowTarget(): Vector2D | Rectangle {\n    if (this.target instanceof CanvasCoords) {\n      return this.target.vec;\n    }\n    else if (!this.target.element)\n      throw new Error(\"Invalid target\");\n    else {\n      return ScreenRect.fromElementBounds(this.target.element).toCanvasRect().rect;\n    }\n  }\n\n  update(source: ITask | CanvasCoords | null, target: ITask | CanvasCoords | null): void {\n    if (source) this.setSource(source);\n    if (target) this.setTarget(target);\n    const arrowSource = this.getArrowSource();\n    const arrowTarget = this.getArrowTarget();    \n    this.arrow.update(arrowSource, arrowTarget);\n  }\n\n  setColor(color: string): void {\n    this.arrow.setColor(color);\n  }\n\n  remove(): void {\n    this.arrow.remove();\n  }\n}\n\nclass ArrowRect {\n  constructor(\n    public readonly task: ITask,\n    public readonly element: HTMLElement\n  ) { }\n}", "declare const gapi: any;\ndeclare const google: any;\n\nexport class GoogleDriveService {\n    private readonly CLIENT_ID = '834406545740-fpa6k2omak75t15u8ve4t7n0t3r1r0ig.apps.googleusercontent.com';\n    private readonly API_KEY = 'AIzaSyCMJf3NuTEBASgWaXTQhy6fiM9QY0GAitg';\n    private readonly DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"];\n    private readonly SCOPES = 'https://www.googleapis.com/auth/drive';\n\n    private tokenClient: any = null;\n    private accessToken: AccessToken | null = null;\n\n    constructor() {\n        this.init();\n    }\n\n    /**\n     * Initializes the Google API client and token client.\n     */\n    private init(): void {\n        // Load the GAPI client.\n        gapi.load('client', () => {\n            gapi.client.init({\n                apiKey: this.API_KEY,\n                discoveryDocs: this.DISCOVERY_DOCS\n            }).then(() => {\n                console.log(\"GAPI client initialized.\");\n            }).catch((error: any) => {\n                console.error(\"Error initializing GAPI client:\", error);\n            });\n        });\n\n        // Initialize the token client using the Google Identity Services library.\n        // Note: Make sure the gsi/client script is loaded.\n        this.tokenClient = google.accounts.oauth2.initTokenClient({\n            client_id: this.CLIENT_ID,\n            scope: this.SCOPES,\n            callback: (response: any) => {\n                // Default callback if needed.\n                if (response.error) {\n                    console.error(\"Error during token acquisition:\", response.error);\n                } \n                else {\n                    this.accessToken = AccessToken.fromResponse(response);\n                    console.log(\"Access token acquired:\", this.accessToken.token);\n                }\n            }\n        });\n    }\n\n    /**\n     * Attempts to automatically sign in the user using an existing token.\n     * Returns true if sign-in was successful, otherwise false.\n     */\n    public tryAutoSignIn(): boolean {\n        const existingToken = AccessToken.getExisting();\n        if (existingToken) {\n            this.accessToken = existingToken;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Prompts the user to sign in with their Google account.\n     * Returns a promise that resolves to true if sign-in was successful, otherwise false.\n     */\n    public signIn(): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            if (!this.tokenClient) {\n                return reject(new Error(\"Token client not initialized.\"));\n            }\n            // Temporarily override the callback for this sign-in attempt.\n            const originalCallback = this.tokenClient.callback;\n            this.tokenClient.callback = (response: IAccessTokenResponse) => {\n                if (response.error) {\n                    console.error(\"Sign-in error:\", response.error);\n                    resolve(false);\n                }\n                else {\n                    this.accessToken = AccessToken.fromResponse(response);\n                    console.log(\"User signed in, token:\", this.accessToken.token);\n                    resolve(true);\n                }\n                // Restore the original callback.\n                this.tokenClient.callback = originalCallback;\n            };\n            this.tokenClient.requestAccessToken();\n        });\n    }\n\n    /**\n     * Continuously prompts the user to sign in with their Google account until successful.\n     */\n    private async getAccessTokenValidFor(seconds: number): Promise<AccessToken> {\n        const currentToken = this.accessToken || AccessToken.getExisting();\n        if (currentToken && !currentToken.expiresWithin(seconds)) {\n            return currentToken;\n        }\n        while (true) {\n            await this.signIn();\n            if (this.accessToken?.expiresWithin(seconds) === false) {\n                return this.accessToken;\n            }\n        }\n    }\n\n    /**\n     * Prompts the user to select a folder.\n     * Returns a promise that resolves to the selected folder (an object with its ID)\n     * or null if the user dismisses the modal.\n     */\n    public pickFolder(): Promise<string | null> {\n        return new Promise((resolve) => {\n            // Load the Picker API.\n            gapi.load('picker', async () => {\n                const folderView = new google.picker.DocsView(google.picker.ViewId.FOLDERS)\n                    .setParent('root')\n                    .setMode(google.picker.DocsViewMode.LIST)\n                    .setSelectFolderEnabled(true);\n\n                const accessToken = await this.getAccessTokenValidFor(60);\n                const picker = new google.picker.PickerBuilder()\n                    .addView(folderView)\n                    .setOAuthToken(accessToken.token)\n                    .setDeveloperKey(this.API_KEY)\n                    .setCallback((data: any) => {\n                        if (data.action === google.picker.Action.PICKED) {\n                            const folderId = data.docs[0].id;\n                            resolve(folderId);\n                        }\n                        else if (data.action === google.picker.Action.CANCEL) {\n                            resolve(null);\n                        }\n                    })\n                    .build();\n\n                picker.setVisible(true);\n            });\n        });\n    }\n\n    /**\n     * Prompts the user to select a file.\n     * Returns a promise that resolves to the selected file (an object with its ID)\n     * or null if the user dismisses the modal.\n     */\n    public pickFile(mimeTypes?: string | string[]): Promise<string | null> {\n        const mimeTypeString = Array.isArray(mimeTypes) ?\n            mimeTypes.length > 0 ? mimeTypes.join(',') : undefined :\n            mimeTypes;\n\n        return new Promise<string | null>((resolve) => {\n            // Load the Picker API.\n            gapi.load('picker', async () => {\n                const fileView = new google.picker.DocsView(google.picker.ViewId.DOCS)\n                    .setIncludeFolders(true)\n                    .setParent('root')\n                    .setMode(google.picker.DocsViewMode.LIST);\n    \n                if (mimeTypeString) {\n                    fileView.setMimeTypes(mimeTypeString);\n                }\n    \n                const accessToken = await this.getAccessTokenValidFor(60);\n                const picker = new google.picker.PickerBuilder()\n                    .addView(fileView)\n                    .setOAuthToken(accessToken.token)\n                    .setDeveloperKey(this.API_KEY)\n                    .setCallback((data: any) => {\n                        if (data.action === google.picker.Action.PICKED) {\n                            const fileId = data.docs[0].id;\n                            resolve(fileId);\n                        }\n                        else if (data.action === google.picker.Action.CANCEL) {\n                            resolve(null);\n                        }\n                    })\n                    .build();\n    \n                picker.setVisible(true);\n            });\n        });\n    }\n\n    /**\n     * Saves the given content as a new file on Google Drive.\n     * @param fileName The name of the file to be created\n     * @param folderId The ID of the folder where the file should be created\n     * @param content The content to be saved in the file\n     * @returns The ID of the newly created file, or null if the file could not be created\n     */\n    public saveAs(fileName: string, folderId: string, content: string, mimeType?: string): Promise<string | null> {\n        return new Promise(async (resolve) => {\n            const file = new Blob([content], { type: mimeType });\n            let metadata: any = {\n                name: fileName,\n                mimeType: mimeType\n            };\n            if (folderId !== 'root') {\n                metadata.parents = [folderId];\n            }\n            const form = new FormData();\n            form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));\n            form.append('file', file);\n\n            const accessToken = await this.getAccessTokenValidFor(20);\n            fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id', {\n                method: 'POST',\n                headers: new Headers({ 'Authorization': 'Bearer ' + accessToken.token }),\n                body: form\n            })\n                .then(res => res.json())\n                .then(result => {\n                    resolve(result.id);\n                })\n                .catch(err => {\n                    console.error(\"Error creating file:\", err);\n                    resolve(null);\n                });\n        });\n    }\n\n    /**\n     * Saves the given content to an existing file on Google Drive.\n     * @param fileId The ID of the file to be updated\n     * @param content The content to be saved in the file\n     */\n    public save(fileId: string, content: string, mimeType?: string): Promise<void> {\n        return new Promise(async (resolve) => {\n            const accessToken = await this.getAccessTokenValidFor(20);\n            fetch(`https://www.googleapis.com/upload/drive/v3/files/${fileId}?uploadType=media`, {\n                method: 'PATCH',\n                headers: new Headers({\n                    'Authorization': 'Bearer ' + accessToken.token,\n                    'Content-Type': mimeType || 'text/plain'\n                }),\n                body: content\n            })\n                .then(() => resolve())\n                .catch(err => {\n                    console.error(\"Error saving file:\", err);\n                    resolve();\n                });\n        });\n    }\n\n    /**\n     * Retrieves the content of a file from Google Drive.\n     * @param fileId The ID of the file to retrieve\n     * @returns The content of the file, or null if the file could not be retrieved\n     */\n    public open(fileId: string): Promise<string | null> {\n        return new Promise(async (resolve) => {\n            const accessToken = await this.getAccessTokenValidFor(20);\n            fetch(`https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`, {\n                headers: new Headers({ 'Authorization': 'Bearer ' + accessToken.token })\n            })\n                .then(res => res.text())\n                .then(content => resolve(content))\n                .catch(err => {\n                    console.error(\"Error opening file:\", err);\n                    resolve(null);\n                });\n        });\n    }\n}\n\nclass AccessToken {\n    private static readonly TOKEN_KEY = 'googleAccessToken';\n    private static readonly EXPIRY_KEY = 'googleAccessTokenExpires';\n\n    public static getExisting(): AccessToken | null {\n        const token = localStorage.getItem(AccessToken.TOKEN_KEY);\n        if (!token) return null;\n\n        const expiry = localStorage.getItem(AccessToken.EXPIRY_KEY);\n        if (!expiry) return null;\n\n        try {\n            const expires = new Date(expiry);\n\n            // If the token expires in less than 1 minute, don't return it.\n            if (expires.getTime() - Date.now() <= 60_000) return null;\n\n            return new AccessToken(token, expires, false);\n        }\n        catch {\n            return null;\n        }\n    }\n\n    public static fromResponse(response: IAccessTokenResponse): AccessToken {\n        if (!response.access_token || !response.expires_in) {\n            throw new Error(`Invalid access token response: ${JSON.stringify(response)}`);\n        }\n\n        const token = response.access_token;\n        const expires = new Date(Date.now() + response.expires_in * 1000);\n        return new AccessToken(token, expires, true);\n    }\n\n    private constructor(\n        public readonly token: string,\n        public readonly expires: Date,\n        autoSave: boolean\n    ) {\n        if (autoSave) {            \n            localStorage.setItem(AccessToken.TOKEN_KEY, token);\n            localStorage.setItem(AccessToken.EXPIRY_KEY, expires.toISOString());\n        }\n    }\n\n    public expiresWithin(seconds: number): boolean {\n        return this.expires.getTime() - Date.now() <= seconds * 1000;\n    }\n\n}\n\ninterface IAccessTokenResponse {\n    access_token?: string;\n    token_type?: string;\n    expires_in?: number;\n    scope?: string;\n    error?: string;\n    error_description?: string;\n}", "import { IStorageProvider } from \"../IStorageProvider\";\nimport { ICanvasDataModel, ITaskDataModel, IDependencyDataModel } from \"../DataModel\";\nimport { GoogleDriveService } from \"./GoogleDriveService\";\n\nexport class GoogleDriveStorageProvider implements IStorageProvider {\n    private readonly _service: GoogleDriveService;\n    private canvasData: CanvasData;\n    private fileId: string;\n    private mimeType: string;\n\n    constructor(service: GoogleDriveService, fileId: string, mimeType: string) {\n        this._service = service;\n        this.fileId = fileId;\n        this.mimeType = mimeType;\n        this.canvasData = new CanvasData();\n    }\n\n    async retrieveCanvasData(): Promise<ICanvasDataModel> {\n        const content = await this._service.open(this.fileId);\n        const data = content ? JSON.parse(content) as ICanvasDataModel : undefined;\n        this.canvasData = new CanvasData(data);\n        return data ?? this.canvasData.toStorageModel();\n    }\n    saveCanvasData(canvasData: ICanvasDataModel): Promise<void> {\n        this.canvasData = new CanvasData(canvasData);\n        return this.save();\n    }\n    saveTask(task: ITaskDataModel): Promise<void> {\n        this.canvasData.addOrUpdateTask(new TaskDataModel(task));\n        return this.save();\n    }\n    async deleteTask(task: ITaskDataModel): Promise<boolean> {\n        if (this.canvasData.removeTask(new TaskDataModel(task))) {\n            await this.save();\n            return true;\n        }\n        return false;\n    }\n    async saveDependency(dependency: IDependencyDataModel): Promise<void> {\n        if (this.canvasData.addDependency(dependency)) {\n            await this.save();\n        }\n    }\n    async deleteDependency(dependency: IDependencyDataModel): Promise<boolean> {\n        if (this.canvasData.removeDependency(dependency)) {\n            await this.save();\n            return true;\n        }\n        return false;\n    }\n    async saveMany(entities: ReadonlyArray<ITaskDataModel | IDependencyDataModel>): Promise<void> {\n        let changed = false;\n        for (const entity of entities) {\n            const [task, dep] = this.resolveDataModel(entity);\n\n            if (task) changed = this.canvasData.addOrUpdateTask(new TaskDataModel(task)) || changed;\n            else if (dep) changed = this.canvasData.addDependency(dep) || changed;\n        }\n        if (changed) {\n            await this.save();\n        }\n    }\n    async deleteMany(entities: ReadonlyArray<ITaskDataModel | IDependencyDataModel>): Promise<void> {\n        let changed = false;\n        for (const entity of entities) {\n            let task: ITaskDataModel | undefined = entity as ITaskDataModel;\n            if (!task.title) task = undefined;\n            let dep: IDependencyDataModel | undefined = entity as IDependencyDataModel;\n            if (task || !dep.requiredTaskId) dep = undefined;\n\n            if (task) changed = this.canvasData.removeTask(new TaskDataModel(task)) || changed;\n            else if (dep) changed = this.canvasData.removeDependency(dep) || changed;\n        }\n        if (changed) {\n            await this.save();\n        }\n    }\n\n    private resolveDataModel(entity: ITaskDataModel | IDependencyDataModel): [ITaskDataModel | undefined, IDependencyDataModel | undefined] {\n        let task: ITaskDataModel | undefined = entity as ITaskDataModel;\n        if (!task.title) task = undefined;\n        let dep: IDependencyDataModel | undefined = entity as IDependencyDataModel;\n        if (task || !dep.requiredTaskId) dep = undefined;\n\n        return [task, dep];\n    }\n    \n    private async save(): Promise<void> {\n        const content = JSON.stringify(this.canvasData.toStorageModel(), null, 2);\n        return this._service.save(this.fileId, content, this.mimeType);\n    }\n}\n\nclass CanvasData {\n    public version: string;\n    private taskMap: Map<string, TaskDataModel>;\n    private depMap: Map<string, DependencyDataModel>;\n    public pan: { x: number; y: number; };\n    public zoom: number;\n\n    constructor(options?: Partial<ICanvasDataModel>) {\n        this.version = options?.version || '1.0';\n        this.taskMap = options?.tasks ? new Map(options.tasks.map(t => [t.id, new TaskDataModel(t)])) : new Map();\n        this.depMap = options?.dependencies ? new Map(options.dependencies.map(d => [`${d.requiredTaskId}->${d.requiredByTaskId}`, d])) : new Map();\n        this.pan = options?.pan || { x: 0, y: 0 };\n        this.zoom = options?.zoom || 1;\n    }\n\n    public addOrUpdateTask(task: TaskDataModel): boolean {\n        this.taskMap.set(task.id, task);\n        return true;\n    }\n    public removeTask(task: TaskDataModel): boolean {\n        return this.taskMap.delete(task.id);\n    }\n    public addDependency(dep: IDependencyDataModel): boolean {\n        const key = `${dep.requiredTaskId}->${dep.requiredByTaskId}`;\n        if (this.depMap.has(key)) return false;\n\n        this.depMap.set(key, dep);\n        return true;\n    }\n    public removeDependency(dep: IDependencyDataModel): boolean {\n        return this.depMap.delete(`${dep.requiredTaskId}->${dep.requiredByTaskId}`);\n    }\n\n    toStorageModel(): ICanvasDataModel {\n        return {\n            version: this.version,\n            tasks: [...this.taskMap.values()],\n            dependencies: [...this.depMap.values()],\n            pan: this.pan,\n            zoom: this.zoom\n        };\n    }\n}\n\nclass TaskDataModel implements ITaskDataModel {\n    public id: string;\n    public title: string;\n    public description: string;\n    public completed: boolean;\n    public position: { x: number; y: number; };\n    public collapsed: boolean;\n\n    constructor(model: ITaskDataModel) {\n        this.id = model.id;\n        this.title = model.title;\n        this.description = model.description;\n        this.completed = model.completed;\n        this.position = {\n            x: model.position.x,\n            y: model.position.y\n        };\n        this.collapsed = model.collapsed;\n    }\n}\n\nclass DependencyDataModel implements IDependencyDataModel {\n    public requiredTaskId: string;\n    public requiredByTaskId: string;\n\n    constructor(model: IDependencyDataModel) {\n        this.requiredTaskId = model.requiredTaskId;\n        this.requiredByTaskId = model.requiredByTaskId;\n    }\n}", "import { ICanvasDataModel } from \"../DataModel\";\nimport { IStorageConnectionProvider } from \"../IStorageConnectionProvider\";\nimport { IStorageProvider } from \"../IStorageProvider\";\nimport { GoogleDriveService } from \"./GoogleDriveService\";\nimport { GoogleDriveStorageProvider } from \"./GoogleDriveStorageProvider\";\n\nconst MIME_TYPE = 'application/vnd.taskcanvas+json';\n\nexport class GoogleDriveStorageConnectionProvider implements IStorageConnectionProvider {\n    private static _service: GoogleDriveService;\n    private _service: GoogleDriveService;\n    private signedIn = false;\n\n    constructor() {\n        GoogleDriveStorageConnectionProvider._service ??= new GoogleDriveService();\n        this._service = GoogleDriveStorageConnectionProvider._service;\n    }\n\n    async requestAuthentication(): Promise<boolean> {\n        if (!this.signedIn) {\n            this.signedIn = this._service.tryAutoSignIn();\n            if (this.signedIn) return true;\n        }\n        this.signedIn = await this._service.signIn();\n        return this.signedIn;\n    }\n\n    async requestConnection(isNew: boolean): Promise<IStorageProvider | null> {\n        if (!this.signedIn) {\n            console.error(\"Not signed in to Google Drive.\");\n            return null;\n        }\n        if (isNew) {\n            // Let the user decide if they want to choose a folder.\n            const useFolder = confirm(\n                \"Do you want to choose a folder for your new task canvas file?\\n\\nClick OK for folder selection, or Cancel to use the root folder.\"\n            );\n            let folderId: string | null = 'root';\n            if (useFolder) {\n                folderId = await this._service.pickFolder(); // This is immediately returning null\n                if (!folderId) return null;\n            }\n            let fileName = prompt(\"Enter the file name for the new canvas file (e.g., mycanvas.tc):\");\n            if (!fileName) return null;\n            // Make sure the file name ends with .tc\n            if (!fileName.endsWith('.tc')) {\n                fileName += '.tc';\n            }\n            // Our initial task canvas: an empty canvas with default values.\n            const initialData = {\n                version: \"1.0\",\n                tasks: [],\n                dependencies: [],\n                pan: { x: 0, y: 0 },\n                zoom: 1\n            };\n            const fileId = await this.createNewFile(fileName, folderId, initialData);\n            if (!fileId) return null;\n            return new GoogleDriveStorageProvider(this._service, fileId, MIME_TYPE);\n        }\n        else {\n            // Open the file picker for existing .tc files.\n            const fileIdPromise = this._service.pickFile(MIME_TYPE);\n            const fileId = await fileIdPromise;\n            if (!fileId) return null;\n            return new GoogleDriveStorageProvider(this._service, fileId, MIME_TYPE);\n        }\n    }\n\n    /**\n     * Creates a new .tc file on Google Drive with the given name, folder, and initial canvas data.\n     * Returns the ID of the new file, or null if the file could not be created.\n     */\n    private createNewFile(fileName: string, folderId: string, initialData: ICanvasDataModel): Promise<string | null> {\n        return this._service.saveAs(fileName, folderId, JSON.stringify(initialData, null, 2));\n    }\n}\n", "import { App } from \"./Application/App\";\nimport { AppController } from \"./Controller/MouseAndKeyboard/AppController\";\nimport { AppPresenter } from \"./Presenter/AppPresenter\";\nimport { GoogleDriveStorageConnectionProvider } from \"./Storage/GoogleDrive/GoogleDriveStorageConnectionProvider\";\nimport { IStorageProvider } from \"./Storage/IStorageProvider\";\n\ndocument.addEventListener('DOMContentLoaded', (): void => {\n    const presenter = new AppPresenter();\n    const stgConnProvider = new GoogleDriveStorageConnectionProvider();\n    const app = new App(presenter, [stgConnProvider]);\n    const controller = new AppController(app, presenter);\n    \n    app.pauseCanvas();\n    getStorageProvider().then(() =>\n        app.load()\n    );\n\n    async function getStorageProvider(): Promise<void> {\n        let storageProvider: IStorageProvider | null = null;\n        while (!storageProvider) {\n            storageProvider = await app.requestConnectionToStorage(false);\n        }\n    }\n});\n"],
  "mappings": "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",
  "names": ["TwoKeyMap", "entries", "key1", "key2", "value", "innerMap", "result", "values", "Vector2D", "_Vector2D", "x", "y", "other", "scalar", "lenSqr", "invLen", "Rectangle", "_Rectangle", "position", "size", "bounds", "p1", "p2", "eigenpoint", "point", "CustomPanZoom", "Vector2D", "el", "e", "delta", "mousePos", "newScale", "eigenpoint", "scaleRatio", "ScreenCoords", "_ScreenCoords", "vec", "x", "y", "Vector2D", "event", "other", "SizeOnScreen", "scale", "CustomPanZoom", "translation", "CanvasCoords", "_SizeOnScreen", "width", "height", "SizeOnCanvas", "ScreenRect", "_ScreenRect", "position", "size", "rect", "Rectangle", "element", "bounds", "p1", "p2", "CanvasRect", "point", "_CanvasCoords", "_SizeOnCanvas", "_CanvasRect", "Task", "_Task", "options", "Dependency", "requiredTask", "requiredByTask", "allTasks", "allDependencies", "TwoKeyMap", "App", "presenter", "storageConnectionProviders", "position", "task", "Task", "allTasks", "itask", "complete", "expand", "title", "oldTitle", "description", "oldDescription", "taskMovements", "moveLogs", "movedTasks", "taskMovement", "oldPosition", "CanvasCoords", "idep", "dep", "Dependency", "allDependencies", "itasks", "tasks", "deletedTasks", "deletedDependencies", "requiredITask", "requiredByITask", "requiredTask", "requiredByTask", "dependency", "arrow", "iDependency", "detachFromTasks", "skipUndo", "action", "doPause", "storageConnectionProvider", "isNew", "data", "taskData", "depData", "entities", "e", "MouseInputInterpreter", "callback", "leftMouseDownEvent", "rightMouseDownEvent", "lastClickData", "leftDragStarted", "rightDragStarted", "dragThreshold", "dblClickDelay", "listenersAdded", "onMouseDown", "e", "onMouseMove", "safeCallback", "createVirtualEvent", "dx", "dy", "onMouseUp", "now", "type", "originalEvent", "ve", "error", "init", "cb", "destroy", "ControlStateManager", "ScreenCoords", "SizeOnScreen", "Vector2D", "CanvasCoords", "SNAP_GRID_SIZE", "SNAP_DISTANCE", "AppController", "app", "presenter", "ControlStateManager", "MouseInputInterpreter", "virtualEvent", "evt", "e", "ScreenCoords", "SizeOnScreen", "context", "taskOrCursorScreenPosition", "secondTask", "movement", "canvasDragVector", "newCanvasPos", "snapX", "snapY", "dx", "dy", "CanvasCoords", "dragVector", "origAnchorPos", "newAnchorPos", "task", "newPos", "taskMovements", "pos", "origPos", "startPosition", "currentPosition", "tasksInArea", "deselect", "finishEditingTaskTitle", "title", "taskInfo", "finishEditingTaskDescription", "description", "eTask", "taskIsPartOfSelection", "originalTitle", "originalDescription", "canvasPos", "snappedPosition", "options", "dependency", "tasksToDelete", "option", "tasks", "anchorTask", "firstTask", "firstTaskIsRequiredTask", "cursorPos", "arrowSource", "arrowTarget", "arrow", "DependencyArrow", "arrowCounter", "DEFAULT_GRID_SIZE", "DEFAULT_MARGIN", "FIXED_RADIUS", "ARROW_THICKNESS", "resolveEndpoint", "input", "role", "Rectangle", "computeVerticalX", "sx", "ex", "gridSize", "mid", "computeRoute", "S", "E", "startElem", "endElem", "route", "adjustedStartX", "adjustedEndX", "X_start", "X_end", "X_mid", "Vector2D", "X1", "X_final", "effectiveStartY", "effectiveEndY", "Y_mid", "last", "computeBoundingBox", "points", "margin", "xs", "p", "ys", "minX", "minY", "maxX", "maxY", "removeDuplicatePoints", "newPoints", "i", "createRoundedPath", "radius", "d", "prevPoint", "roundedPoints", "current", "next", "v1", "v2", "u1", "u2", "dot", "clampedDot", "theta", "d_required", "len1", "len2", "d_eff", "r_eff", "pEntry", "pExit", "firstPoint", "ptOrArc", "pt", "arcInfo", "sweepFlag", "parent", "start", "end", "options", "svgNS", "invalid", "routePoints", "bbox", "svg", "markerId", "defs", "marker", "markerPath", "localPoints", "path", "newStart", "newEnd", "S_new", "E_new", "nowInvalid", "newRoute", "newBbox", "newLocalPoints", "newD", "type", "listener", "newColor", "ModalDialog", "element", "options", "title", "body", "footer", "buttons", "key", "label", "button", "close", "dialog", "dialogContent", "dialogHeader", "dialogTitle", "dialogClose", "dialogBody", "dialogFooter", "AppPresenter", "CustomPanZoom", "modalScreen", "ModalDialog", "title", "message", "options", "resolve", "button", "delta", "task", "elem", "CanvasCoords", "highlight", "taskEl", "start", "end", "x", "y", "scale", "translation", "width", "height", "mapping", "selectionRect", "ScreenRect", "tasksInArea", "taskRect", "id", "position", "contextMenuElement", "opt", "item", "eTask", "pos", "header", "toggle", "checkbox", "checkboxFill", "taskBody", "description", "autoAdjustZPosition", "taskElement", "taskItem", "t", "newIndex", "enable", "titleEl", "titleInput", "newTitleEl", "descEl", "oldValue", "editorContainer", "editorElement", "quill", "adjustHeight", "newHeight", "newValue", "newDescEl", "completed", "taskElem", "innerRect", "collapsed", "toggleElem", "index", "dependency", "requiredTask", "requiredByTask", "key", "wrapper", "ArrowWrapper", "source", "target", "arrow", "updatedSource", "updatedTarget", "color", "element", "arrowElement", "dataId", "eContextMenuItems", "id1", "id2", "_ArrowWrapper", "presenter", "dependencyKey", "canvas", "DependencyArrow", "value", "ArrowRect", "arrowSource", "arrowTarget", "GoogleDriveService", "error", "response", "AccessToken", "existingToken", "resolve", "reject", "originalCallback", "seconds", "currentToken", "folderView", "accessToken", "data", "folderId", "mimeTypes", "mimeTypeString", "fileView", "fileId", "fileName", "content", "mimeType", "file", "metadata", "form", "res", "result", "err", "_AccessToken", "token", "expires", "autoSave", "expiry", "GoogleDriveStorageProvider", "service", "fileId", "mimeType", "CanvasData", "content", "data", "canvasData", "task", "TaskDataModel", "dependency", "entities", "changed", "entity", "dep", "options", "d", "key", "model", "MIME_TYPE", "GoogleDriveStorageConnectionProvider", "_GoogleDriveStorageConnectionProvider", "GoogleDriveService", "isNew", "useFolder", "folderId", "fileName", "initialData", "fileId", "GoogleDriveStorageProvider", "presenter", "AppPresenter", "stgConnProvider", "GoogleDriveStorageConnectionProvider", "app", "App", "controller", "AppController", "getStorageProvider", "storageProvider"]
}
